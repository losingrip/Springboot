2020-07-03 16:39:45  [ main:0 ] - [ DEBUG ]  {conn-10001} connected
2020-07-03 16:39:45  [ main:6 ] - [ DEBUG ]  {conn-10001, stmt-20000} created
2020-07-03 16:39:46  [ main:332 ] - [ ERROR ]  {conn-10001, stmt-20000} execute error. SELECT 1 FROM DUAL
com.microsoft.sqlserver.jdbc.SQLServerException: 对象名 'DUAL' 无效。
	at com.microsoft.sqlserver.jdbc.SQLServerException.makeFromDatabaseError(SQLServerException.java:254)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.getNextResult(SQLServerStatement.java:1608)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.doExecuteStatement(SQLServerStatement.java:859)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement$StmtExecCmd.doExecute(SQLServerStatement.java:759)
	at com.microsoft.sqlserver.jdbc.TDSCommand.execute(IOBuffer.java:7240)
	at com.microsoft.sqlserver.jdbc.SQLServerConnection.executeCommand(SQLServerConnection.java:2869)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeCommand(SQLServerStatement.java:243)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeStatement(SQLServerStatement.java:218)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeQuery(SQLServerStatement.java:688)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2363)
	at com.alibaba.druid.filter.FilterAdapter.statement_executeQuery(FilterAdapter.java:2481)
	at com.alibaba.druid.filter.FilterEventAdapter.statement_executeQuery(FilterEventAdapter.java:302)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.wall.WallFilter.statement_executeQuery(WallFilter.java:498)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.filter.FilterAdapter.statement_executeQuery(FilterAdapter.java:2481)
	at com.alibaba.druid.filter.FilterEventAdapter.statement_executeQuery(FilterEventAdapter.java:302)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.proxy.jdbc.StatementProxyImpl.executeQuery(StatementProxyImpl.java:211)
	at com.alibaba.druid.pool.DruidAbstractDataSource.validateConnection(DruidAbstractDataSource.java:1229)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1439)
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:618)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:915)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:911)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:98)
	at org.springframework.jdbc.datasource.DataSourceTransactionManager.doBegin(DataSourceTransactionManager.java:262)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:378)
	at org.springframework.test.context.transaction.TransactionContext.startTransaction(TransactionContext.java:103)
	at org.springframework.test.context.transaction.TransactionalTestExecutionListener.beforeTestMethod(TransactionalTestExecutionListener.java:192)
	at org.springframework.test.context.TestContextManager.beforeTestMethod(TestContextManager.java:291)
	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:74)
	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86)
	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:251)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:97)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:190)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
2020-07-03 16:39:46  [ main:349 ] - [ DEBUG ]  {conn-10001, stmt-20000} closed
2020-07-03 16:39:46  [ main:349 ] - [ ERROR ]  init datasource error
com.microsoft.sqlserver.jdbc.SQLServerException: 对象名 'DUAL' 无效。
	at com.microsoft.sqlserver.jdbc.SQLServerException.makeFromDatabaseError(SQLServerException.java:254)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.getNextResult(SQLServerStatement.java:1608)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.doExecuteStatement(SQLServerStatement.java:859)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement$StmtExecCmd.doExecute(SQLServerStatement.java:759)
	at com.microsoft.sqlserver.jdbc.TDSCommand.execute(IOBuffer.java:7240)
	at com.microsoft.sqlserver.jdbc.SQLServerConnection.executeCommand(SQLServerConnection.java:2869)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeCommand(SQLServerStatement.java:243)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeStatement(SQLServerStatement.java:218)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeQuery(SQLServerStatement.java:688)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2363)
	at com.alibaba.druid.filter.FilterAdapter.statement_executeQuery(FilterAdapter.java:2481)
	at com.alibaba.druid.filter.FilterEventAdapter.statement_executeQuery(FilterEventAdapter.java:302)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.wall.WallFilter.statement_executeQuery(WallFilter.java:498)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.filter.FilterAdapter.statement_executeQuery(FilterAdapter.java:2481)
	at com.alibaba.druid.filter.FilterEventAdapter.statement_executeQuery(FilterEventAdapter.java:302)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.proxy.jdbc.StatementProxyImpl.executeQuery(StatementProxyImpl.java:211)
	at com.alibaba.druid.pool.DruidAbstractDataSource.validateConnection(DruidAbstractDataSource.java:1229)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1439)
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:618)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:915)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:911)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:98)
	at org.springframework.jdbc.datasource.DataSourceTransactionManager.doBegin(DataSourceTransactionManager.java:262)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:378)
	at org.springframework.test.context.transaction.TransactionContext.startTransaction(TransactionContext.java:103)
	at org.springframework.test.context.transaction.TransactionalTestExecutionListener.beforeTestMethod(TransactionalTestExecutionListener.java:192)
	at org.springframework.test.context.TestContextManager.beforeTestMethod(TestContextManager.java:291)
	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:74)
	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86)
	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:251)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:97)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:190)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
2020-07-03 16:39:46  [ main:355 ] - [ ERROR ]  dataSource init error
com.microsoft.sqlserver.jdbc.SQLServerException: 对象名 'DUAL' 无效。
	at com.microsoft.sqlserver.jdbc.SQLServerException.makeFromDatabaseError(SQLServerException.java:254)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.getNextResult(SQLServerStatement.java:1608)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.doExecuteStatement(SQLServerStatement.java:859)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement$StmtExecCmd.doExecute(SQLServerStatement.java:759)
	at com.microsoft.sqlserver.jdbc.TDSCommand.execute(IOBuffer.java:7240)
	at com.microsoft.sqlserver.jdbc.SQLServerConnection.executeCommand(SQLServerConnection.java:2869)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeCommand(SQLServerStatement.java:243)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeStatement(SQLServerStatement.java:218)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeQuery(SQLServerStatement.java:688)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2363)
	at com.alibaba.druid.filter.FilterAdapter.statement_executeQuery(FilterAdapter.java:2481)
	at com.alibaba.druid.filter.FilterEventAdapter.statement_executeQuery(FilterEventAdapter.java:302)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.wall.WallFilter.statement_executeQuery(WallFilter.java:498)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.filter.FilterAdapter.statement_executeQuery(FilterAdapter.java:2481)
	at com.alibaba.druid.filter.FilterEventAdapter.statement_executeQuery(FilterEventAdapter.java:302)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.proxy.jdbc.StatementProxyImpl.executeQuery(StatementProxyImpl.java:211)
	at com.alibaba.druid.pool.DruidAbstractDataSource.validateConnection(DruidAbstractDataSource.java:1229)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1439)
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:618)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:915)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:911)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:98)
	at org.springframework.jdbc.datasource.DataSourceTransactionManager.doBegin(DataSourceTransactionManager.java:262)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:378)
	at org.springframework.test.context.transaction.TransactionContext.startTransaction(TransactionContext.java:103)
	at org.springframework.test.context.transaction.TransactionalTestExecutionListener.beforeTestMethod(TransactionalTestExecutionListener.java:192)
	at org.springframework.test.context.TestContextManager.beforeTestMethod(TestContextManager.java:291)
	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:74)
	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86)
	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:251)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:97)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:190)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
2020-07-03 16:39:46  [ main:360 ] - [ INFO ]  {dataSource-1} inited
2020-07-03 16:39:46  [ Thread-2:481 ] - [ INFO ]  {dataSource-1} closed
2020-07-03 16:41:34  [ main:0 ] - [ DEBUG ]  {conn-10001} connected
2020-07-03 16:41:34  [ main:7 ] - [ DEBUG ]  {conn-10001, stmt-20000} created
2020-07-03 16:41:35  [ main:46 ] - [ ERROR ]  {conn-10001, stmt-20000} execute error. SELECT 1 FROM DUAL
com.microsoft.sqlserver.jdbc.SQLServerException: 对象名 'DUAL' 无效。
	at com.microsoft.sqlserver.jdbc.SQLServerException.makeFromDatabaseError(SQLServerException.java:254)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.getNextResult(SQLServerStatement.java:1608)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.doExecuteStatement(SQLServerStatement.java:859)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement$StmtExecCmd.doExecute(SQLServerStatement.java:759)
	at com.microsoft.sqlserver.jdbc.TDSCommand.execute(IOBuffer.java:7240)
	at com.microsoft.sqlserver.jdbc.SQLServerConnection.executeCommand(SQLServerConnection.java:2869)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeCommand(SQLServerStatement.java:243)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeStatement(SQLServerStatement.java:218)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeQuery(SQLServerStatement.java:688)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2363)
	at com.alibaba.druid.filter.FilterAdapter.statement_executeQuery(FilterAdapter.java:2481)
	at com.alibaba.druid.filter.FilterEventAdapter.statement_executeQuery(FilterEventAdapter.java:302)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.wall.WallFilter.statement_executeQuery(WallFilter.java:498)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.filter.FilterAdapter.statement_executeQuery(FilterAdapter.java:2481)
	at com.alibaba.druid.filter.FilterEventAdapter.statement_executeQuery(FilterEventAdapter.java:302)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.proxy.jdbc.StatementProxyImpl.executeQuery(StatementProxyImpl.java:211)
	at com.alibaba.druid.pool.DruidAbstractDataSource.validateConnection(DruidAbstractDataSource.java:1229)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1439)
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:618)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:915)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:911)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:98)
	at org.springframework.jdbc.datasource.DataSourceTransactionManager.doBegin(DataSourceTransactionManager.java:262)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:378)
	at org.springframework.test.context.transaction.TransactionContext.startTransaction(TransactionContext.java:103)
	at org.springframework.test.context.transaction.TransactionalTestExecutionListener.beforeTestMethod(TransactionalTestExecutionListener.java:192)
	at org.springframework.test.context.TestContextManager.beforeTestMethod(TestContextManager.java:291)
	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:74)
	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86)
	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:251)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:97)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:190)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
2020-07-03 16:41:35  [ main:53 ] - [ DEBUG ]  {conn-10001, stmt-20000} closed
2020-07-03 16:41:35  [ main:53 ] - [ ERROR ]  init datasource error
com.microsoft.sqlserver.jdbc.SQLServerException: 对象名 'DUAL' 无效。
	at com.microsoft.sqlserver.jdbc.SQLServerException.makeFromDatabaseError(SQLServerException.java:254)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.getNextResult(SQLServerStatement.java:1608)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.doExecuteStatement(SQLServerStatement.java:859)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement$StmtExecCmd.doExecute(SQLServerStatement.java:759)
	at com.microsoft.sqlserver.jdbc.TDSCommand.execute(IOBuffer.java:7240)
	at com.microsoft.sqlserver.jdbc.SQLServerConnection.executeCommand(SQLServerConnection.java:2869)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeCommand(SQLServerStatement.java:243)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeStatement(SQLServerStatement.java:218)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeQuery(SQLServerStatement.java:688)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2363)
	at com.alibaba.druid.filter.FilterAdapter.statement_executeQuery(FilterAdapter.java:2481)
	at com.alibaba.druid.filter.FilterEventAdapter.statement_executeQuery(FilterEventAdapter.java:302)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.wall.WallFilter.statement_executeQuery(WallFilter.java:498)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.filter.FilterAdapter.statement_executeQuery(FilterAdapter.java:2481)
	at com.alibaba.druid.filter.FilterEventAdapter.statement_executeQuery(FilterEventAdapter.java:302)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.proxy.jdbc.StatementProxyImpl.executeQuery(StatementProxyImpl.java:211)
	at com.alibaba.druid.pool.DruidAbstractDataSource.validateConnection(DruidAbstractDataSource.java:1229)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1439)
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:618)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:915)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:911)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:98)
	at org.springframework.jdbc.datasource.DataSourceTransactionManager.doBegin(DataSourceTransactionManager.java:262)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:378)
	at org.springframework.test.context.transaction.TransactionContext.startTransaction(TransactionContext.java:103)
	at org.springframework.test.context.transaction.TransactionalTestExecutionListener.beforeTestMethod(TransactionalTestExecutionListener.java:192)
	at org.springframework.test.context.TestContextManager.beforeTestMethod(TestContextManager.java:291)
	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:74)
	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86)
	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:251)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:97)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:190)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
2020-07-03 16:41:35  [ main:59 ] - [ ERROR ]  dataSource init error
com.microsoft.sqlserver.jdbc.SQLServerException: 对象名 'DUAL' 无效。
	at com.microsoft.sqlserver.jdbc.SQLServerException.makeFromDatabaseError(SQLServerException.java:254)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.getNextResult(SQLServerStatement.java:1608)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.doExecuteStatement(SQLServerStatement.java:859)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement$StmtExecCmd.doExecute(SQLServerStatement.java:759)
	at com.microsoft.sqlserver.jdbc.TDSCommand.execute(IOBuffer.java:7240)
	at com.microsoft.sqlserver.jdbc.SQLServerConnection.executeCommand(SQLServerConnection.java:2869)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeCommand(SQLServerStatement.java:243)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeStatement(SQLServerStatement.java:218)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeQuery(SQLServerStatement.java:688)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2363)
	at com.alibaba.druid.filter.FilterAdapter.statement_executeQuery(FilterAdapter.java:2481)
	at com.alibaba.druid.filter.FilterEventAdapter.statement_executeQuery(FilterEventAdapter.java:302)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.wall.WallFilter.statement_executeQuery(WallFilter.java:498)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.filter.FilterAdapter.statement_executeQuery(FilterAdapter.java:2481)
	at com.alibaba.druid.filter.FilterEventAdapter.statement_executeQuery(FilterEventAdapter.java:302)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.proxy.jdbc.StatementProxyImpl.executeQuery(StatementProxyImpl.java:211)
	at com.alibaba.druid.pool.DruidAbstractDataSource.validateConnection(DruidAbstractDataSource.java:1229)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1439)
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:618)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:915)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:911)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:98)
	at org.springframework.jdbc.datasource.DataSourceTransactionManager.doBegin(DataSourceTransactionManager.java:262)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:378)
	at org.springframework.test.context.transaction.TransactionContext.startTransaction(TransactionContext.java:103)
	at org.springframework.test.context.transaction.TransactionalTestExecutionListener.beforeTestMethod(TransactionalTestExecutionListener.java:192)
	at org.springframework.test.context.TestContextManager.beforeTestMethod(TestContextManager.java:291)
	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:74)
	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86)
	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:251)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:97)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:190)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
2020-07-03 16:41:35  [ main:64 ] - [ INFO ]  {dataSource-1} inited
2020-07-03 16:41:35  [ Thread-2:148 ] - [ INFO ]  {dataSource-1} closed
2020-07-03 16:47:54  [ main:0 ] - [ DEBUG ]  {conn-10001} connected
2020-07-03 16:47:54  [ main:10 ] - [ DEBUG ]  {conn-10001, stmt-20000} created
2020-07-03 16:47:54  [ main:60 ] - [ ERROR ]  {conn-10001, stmt-20000} execute error. SELECT 1 FROM DUAL
com.microsoft.sqlserver.jdbc.SQLServerException: 对象名 'DUAL' 无效。
	at com.microsoft.sqlserver.jdbc.SQLServerException.makeFromDatabaseError(SQLServerException.java:254)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.getNextResult(SQLServerStatement.java:1608)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.doExecuteStatement(SQLServerStatement.java:859)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement$StmtExecCmd.doExecute(SQLServerStatement.java:759)
	at com.microsoft.sqlserver.jdbc.TDSCommand.execute(IOBuffer.java:7240)
	at com.microsoft.sqlserver.jdbc.SQLServerConnection.executeCommand(SQLServerConnection.java:2869)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeCommand(SQLServerStatement.java:243)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeStatement(SQLServerStatement.java:218)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeQuery(SQLServerStatement.java:688)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2363)
	at com.alibaba.druid.filter.FilterAdapter.statement_executeQuery(FilterAdapter.java:2481)
	at com.alibaba.druid.filter.FilterEventAdapter.statement_executeQuery(FilterEventAdapter.java:302)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.wall.WallFilter.statement_executeQuery(WallFilter.java:498)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.filter.FilterAdapter.statement_executeQuery(FilterAdapter.java:2481)
	at com.alibaba.druid.filter.FilterEventAdapter.statement_executeQuery(FilterEventAdapter.java:302)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.proxy.jdbc.StatementProxyImpl.executeQuery(StatementProxyImpl.java:211)
	at com.alibaba.druid.pool.DruidAbstractDataSource.validateConnection(DruidAbstractDataSource.java:1229)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1439)
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:618)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:915)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:911)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:98)
	at org.springframework.jdbc.datasource.DataSourceTransactionManager.doBegin(DataSourceTransactionManager.java:262)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:378)
	at org.springframework.test.context.transaction.TransactionContext.startTransaction(TransactionContext.java:103)
	at org.springframework.test.context.transaction.TransactionalTestExecutionListener.beforeTestMethod(TransactionalTestExecutionListener.java:192)
	at org.springframework.test.context.TestContextManager.beforeTestMethod(TestContextManager.java:291)
	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:74)
	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86)
	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:251)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:97)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:190)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
2020-07-03 16:47:54  [ main:70 ] - [ DEBUG ]  {conn-10001, stmt-20000} closed
2020-07-03 16:47:54  [ main:70 ] - [ ERROR ]  init datasource error
com.microsoft.sqlserver.jdbc.SQLServerException: 对象名 'DUAL' 无效。
	at com.microsoft.sqlserver.jdbc.SQLServerException.makeFromDatabaseError(SQLServerException.java:254)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.getNextResult(SQLServerStatement.java:1608)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.doExecuteStatement(SQLServerStatement.java:859)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement$StmtExecCmd.doExecute(SQLServerStatement.java:759)
	at com.microsoft.sqlserver.jdbc.TDSCommand.execute(IOBuffer.java:7240)
	at com.microsoft.sqlserver.jdbc.SQLServerConnection.executeCommand(SQLServerConnection.java:2869)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeCommand(SQLServerStatement.java:243)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeStatement(SQLServerStatement.java:218)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeQuery(SQLServerStatement.java:688)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2363)
	at com.alibaba.druid.filter.FilterAdapter.statement_executeQuery(FilterAdapter.java:2481)
	at com.alibaba.druid.filter.FilterEventAdapter.statement_executeQuery(FilterEventAdapter.java:302)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.wall.WallFilter.statement_executeQuery(WallFilter.java:498)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.filter.FilterAdapter.statement_executeQuery(FilterAdapter.java:2481)
	at com.alibaba.druid.filter.FilterEventAdapter.statement_executeQuery(FilterEventAdapter.java:302)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.proxy.jdbc.StatementProxyImpl.executeQuery(StatementProxyImpl.java:211)
	at com.alibaba.druid.pool.DruidAbstractDataSource.validateConnection(DruidAbstractDataSource.java:1229)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1439)
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:618)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:915)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:911)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:98)
	at org.springframework.jdbc.datasource.DataSourceTransactionManager.doBegin(DataSourceTransactionManager.java:262)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:378)
	at org.springframework.test.context.transaction.TransactionContext.startTransaction(TransactionContext.java:103)
	at org.springframework.test.context.transaction.TransactionalTestExecutionListener.beforeTestMethod(TransactionalTestExecutionListener.java:192)
	at org.springframework.test.context.TestContextManager.beforeTestMethod(TestContextManager.java:291)
	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:74)
	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86)
	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:251)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:97)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:190)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
2020-07-03 16:47:54  [ main:81 ] - [ ERROR ]  dataSource init error
com.microsoft.sqlserver.jdbc.SQLServerException: 对象名 'DUAL' 无效。
	at com.microsoft.sqlserver.jdbc.SQLServerException.makeFromDatabaseError(SQLServerException.java:254)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.getNextResult(SQLServerStatement.java:1608)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.doExecuteStatement(SQLServerStatement.java:859)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement$StmtExecCmd.doExecute(SQLServerStatement.java:759)
	at com.microsoft.sqlserver.jdbc.TDSCommand.execute(IOBuffer.java:7240)
	at com.microsoft.sqlserver.jdbc.SQLServerConnection.executeCommand(SQLServerConnection.java:2869)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeCommand(SQLServerStatement.java:243)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeStatement(SQLServerStatement.java:218)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeQuery(SQLServerStatement.java:688)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2363)
	at com.alibaba.druid.filter.FilterAdapter.statement_executeQuery(FilterAdapter.java:2481)
	at com.alibaba.druid.filter.FilterEventAdapter.statement_executeQuery(FilterEventAdapter.java:302)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.wall.WallFilter.statement_executeQuery(WallFilter.java:498)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.filter.FilterAdapter.statement_executeQuery(FilterAdapter.java:2481)
	at com.alibaba.druid.filter.FilterEventAdapter.statement_executeQuery(FilterEventAdapter.java:302)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.proxy.jdbc.StatementProxyImpl.executeQuery(StatementProxyImpl.java:211)
	at com.alibaba.druid.pool.DruidAbstractDataSource.validateConnection(DruidAbstractDataSource.java:1229)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1439)
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:618)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:915)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:911)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:98)
	at org.springframework.jdbc.datasource.DataSourceTransactionManager.doBegin(DataSourceTransactionManager.java:262)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:378)
	at org.springframework.test.context.transaction.TransactionContext.startTransaction(TransactionContext.java:103)
	at org.springframework.test.context.transaction.TransactionalTestExecutionListener.beforeTestMethod(TransactionalTestExecutionListener.java:192)
	at org.springframework.test.context.TestContextManager.beforeTestMethod(TestContextManager.java:291)
	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:74)
	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86)
	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:251)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:97)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:190)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
2020-07-03 16:47:54  [ main:84 ] - [ INFO ]  {dataSource-1} inited
2020-07-03 16:47:54  [ Thread-2:167 ] - [ INFO ]  {dataSource-1} closed
2020-07-03 16:52:53  [ main:0 ] - [ DEBUG ]  {conn-10001} connected
2020-07-03 16:52:53  [ main:9 ] - [ DEBUG ]  {conn-10001, stmt-20000} created
2020-07-03 16:52:53  [ main:50 ] - [ ERROR ]  {conn-10001, stmt-20000} execute error. SELECT 1 FROM DUAL
com.microsoft.sqlserver.jdbc.SQLServerException: 对象名 'DUAL' 无效。
	at com.microsoft.sqlserver.jdbc.SQLServerException.makeFromDatabaseError(SQLServerException.java:254)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.getNextResult(SQLServerStatement.java:1608)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.doExecuteStatement(SQLServerStatement.java:859)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement$StmtExecCmd.doExecute(SQLServerStatement.java:759)
	at com.microsoft.sqlserver.jdbc.TDSCommand.execute(IOBuffer.java:7240)
	at com.microsoft.sqlserver.jdbc.SQLServerConnection.executeCommand(SQLServerConnection.java:2869)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeCommand(SQLServerStatement.java:243)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeStatement(SQLServerStatement.java:218)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeQuery(SQLServerStatement.java:688)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2363)
	at com.alibaba.druid.filter.FilterAdapter.statement_executeQuery(FilterAdapter.java:2481)
	at com.alibaba.druid.filter.FilterEventAdapter.statement_executeQuery(FilterEventAdapter.java:302)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.wall.WallFilter.statement_executeQuery(WallFilter.java:498)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.filter.FilterAdapter.statement_executeQuery(FilterAdapter.java:2481)
	at com.alibaba.druid.filter.FilterEventAdapter.statement_executeQuery(FilterEventAdapter.java:302)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.proxy.jdbc.StatementProxyImpl.executeQuery(StatementProxyImpl.java:211)
	at com.alibaba.druid.pool.DruidAbstractDataSource.validateConnection(DruidAbstractDataSource.java:1229)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1439)
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:618)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:915)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:911)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:98)
	at org.springframework.jdbc.datasource.DataSourceTransactionManager.doBegin(DataSourceTransactionManager.java:262)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:378)
	at org.springframework.test.context.transaction.TransactionContext.startTransaction(TransactionContext.java:103)
	at org.springframework.test.context.transaction.TransactionalTestExecutionListener.beforeTestMethod(TransactionalTestExecutionListener.java:192)
	at org.springframework.test.context.TestContextManager.beforeTestMethod(TestContextManager.java:291)
	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:74)
	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86)
	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:251)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:97)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:190)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
2020-07-03 16:52:53  [ main:55 ] - [ DEBUG ]  {conn-10001, stmt-20000} closed
2020-07-03 16:52:53  [ main:56 ] - [ ERROR ]  init datasource error
com.microsoft.sqlserver.jdbc.SQLServerException: 对象名 'DUAL' 无效。
	at com.microsoft.sqlserver.jdbc.SQLServerException.makeFromDatabaseError(SQLServerException.java:254)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.getNextResult(SQLServerStatement.java:1608)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.doExecuteStatement(SQLServerStatement.java:859)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement$StmtExecCmd.doExecute(SQLServerStatement.java:759)
	at com.microsoft.sqlserver.jdbc.TDSCommand.execute(IOBuffer.java:7240)
	at com.microsoft.sqlserver.jdbc.SQLServerConnection.executeCommand(SQLServerConnection.java:2869)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeCommand(SQLServerStatement.java:243)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeStatement(SQLServerStatement.java:218)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeQuery(SQLServerStatement.java:688)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2363)
	at com.alibaba.druid.filter.FilterAdapter.statement_executeQuery(FilterAdapter.java:2481)
	at com.alibaba.druid.filter.FilterEventAdapter.statement_executeQuery(FilterEventAdapter.java:302)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.wall.WallFilter.statement_executeQuery(WallFilter.java:498)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.filter.FilterAdapter.statement_executeQuery(FilterAdapter.java:2481)
	at com.alibaba.druid.filter.FilterEventAdapter.statement_executeQuery(FilterEventAdapter.java:302)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.proxy.jdbc.StatementProxyImpl.executeQuery(StatementProxyImpl.java:211)
	at com.alibaba.druid.pool.DruidAbstractDataSource.validateConnection(DruidAbstractDataSource.java:1229)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1439)
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:618)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:915)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:911)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:98)
	at org.springframework.jdbc.datasource.DataSourceTransactionManager.doBegin(DataSourceTransactionManager.java:262)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:378)
	at org.springframework.test.context.transaction.TransactionContext.startTransaction(TransactionContext.java:103)
	at org.springframework.test.context.transaction.TransactionalTestExecutionListener.beforeTestMethod(TransactionalTestExecutionListener.java:192)
	at org.springframework.test.context.TestContextManager.beforeTestMethod(TestContextManager.java:291)
	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:74)
	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86)
	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:251)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:97)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:190)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
2020-07-03 16:52:53  [ main:67 ] - [ ERROR ]  dataSource init error
com.microsoft.sqlserver.jdbc.SQLServerException: 对象名 'DUAL' 无效。
	at com.microsoft.sqlserver.jdbc.SQLServerException.makeFromDatabaseError(SQLServerException.java:254)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.getNextResult(SQLServerStatement.java:1608)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.doExecuteStatement(SQLServerStatement.java:859)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement$StmtExecCmd.doExecute(SQLServerStatement.java:759)
	at com.microsoft.sqlserver.jdbc.TDSCommand.execute(IOBuffer.java:7240)
	at com.microsoft.sqlserver.jdbc.SQLServerConnection.executeCommand(SQLServerConnection.java:2869)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeCommand(SQLServerStatement.java:243)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeStatement(SQLServerStatement.java:218)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeQuery(SQLServerStatement.java:688)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2363)
	at com.alibaba.druid.filter.FilterAdapter.statement_executeQuery(FilterAdapter.java:2481)
	at com.alibaba.druid.filter.FilterEventAdapter.statement_executeQuery(FilterEventAdapter.java:302)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.wall.WallFilter.statement_executeQuery(WallFilter.java:498)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.filter.FilterAdapter.statement_executeQuery(FilterAdapter.java:2481)
	at com.alibaba.druid.filter.FilterEventAdapter.statement_executeQuery(FilterEventAdapter.java:302)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.proxy.jdbc.StatementProxyImpl.executeQuery(StatementProxyImpl.java:211)
	at com.alibaba.druid.pool.DruidAbstractDataSource.validateConnection(DruidAbstractDataSource.java:1229)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1439)
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:618)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:915)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:911)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:98)
	at org.springframework.jdbc.datasource.DataSourceTransactionManager.doBegin(DataSourceTransactionManager.java:262)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:378)
	at org.springframework.test.context.transaction.TransactionContext.startTransaction(TransactionContext.java:103)
	at org.springframework.test.context.transaction.TransactionalTestExecutionListener.beforeTestMethod(TransactionalTestExecutionListener.java:192)
	at org.springframework.test.context.TestContextManager.beforeTestMethod(TestContextManager.java:291)
	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:74)
	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86)
	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:251)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:97)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:190)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
2020-07-03 16:52:53  [ main:69 ] - [ INFO ]  {dataSource-1} inited
2020-07-03 16:52:53  [ Thread-2:154 ] - [ INFO ]  {dataSource-1} closed
2020-07-03 16:59:24  [ main:0 ] - [ DEBUG ]  {conn-10001} connected
2020-07-03 16:59:24  [ main:7 ] - [ DEBUG ]  {conn-10001, stmt-20000} created
2020-07-03 16:59:24  [ main:48 ] - [ ERROR ]  {conn-10001, stmt-20000} execute error. SELECT 1 FROM DUAL
com.microsoft.sqlserver.jdbc.SQLServerException: 对象名 'DUAL' 无效。
	at com.microsoft.sqlserver.jdbc.SQLServerException.makeFromDatabaseError(SQLServerException.java:254)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.getNextResult(SQLServerStatement.java:1608)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.doExecuteStatement(SQLServerStatement.java:859)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement$StmtExecCmd.doExecute(SQLServerStatement.java:759)
	at com.microsoft.sqlserver.jdbc.TDSCommand.execute(IOBuffer.java:7240)
	at com.microsoft.sqlserver.jdbc.SQLServerConnection.executeCommand(SQLServerConnection.java:2869)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeCommand(SQLServerStatement.java:243)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeStatement(SQLServerStatement.java:218)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeQuery(SQLServerStatement.java:688)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2363)
	at com.alibaba.druid.filter.FilterAdapter.statement_executeQuery(FilterAdapter.java:2481)
	at com.alibaba.druid.filter.FilterEventAdapter.statement_executeQuery(FilterEventAdapter.java:302)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.wall.WallFilter.statement_executeQuery(WallFilter.java:498)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.filter.FilterAdapter.statement_executeQuery(FilterAdapter.java:2481)
	at com.alibaba.druid.filter.FilterEventAdapter.statement_executeQuery(FilterEventAdapter.java:302)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.proxy.jdbc.StatementProxyImpl.executeQuery(StatementProxyImpl.java:211)
	at com.alibaba.druid.pool.DruidAbstractDataSource.validateConnection(DruidAbstractDataSource.java:1229)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1439)
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:618)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:915)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:911)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:98)
	at org.springframework.jdbc.datasource.DataSourceTransactionManager.doBegin(DataSourceTransactionManager.java:262)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:378)
	at org.springframework.test.context.transaction.TransactionContext.startTransaction(TransactionContext.java:103)
	at org.springframework.test.context.transaction.TransactionalTestExecutionListener.beforeTestMethod(TransactionalTestExecutionListener.java:192)
	at org.springframework.test.context.TestContextManager.beforeTestMethod(TestContextManager.java:291)
	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:74)
	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86)
	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:251)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:97)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:190)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
2020-07-03 16:59:24  [ main:56 ] - [ DEBUG ]  {conn-10001, stmt-20000} closed
2020-07-03 16:59:24  [ main:57 ] - [ ERROR ]  init datasource error
com.microsoft.sqlserver.jdbc.SQLServerException: 对象名 'DUAL' 无效。
	at com.microsoft.sqlserver.jdbc.SQLServerException.makeFromDatabaseError(SQLServerException.java:254)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.getNextResult(SQLServerStatement.java:1608)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.doExecuteStatement(SQLServerStatement.java:859)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement$StmtExecCmd.doExecute(SQLServerStatement.java:759)
	at com.microsoft.sqlserver.jdbc.TDSCommand.execute(IOBuffer.java:7240)
	at com.microsoft.sqlserver.jdbc.SQLServerConnection.executeCommand(SQLServerConnection.java:2869)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeCommand(SQLServerStatement.java:243)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeStatement(SQLServerStatement.java:218)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeQuery(SQLServerStatement.java:688)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2363)
	at com.alibaba.druid.filter.FilterAdapter.statement_executeQuery(FilterAdapter.java:2481)
	at com.alibaba.druid.filter.FilterEventAdapter.statement_executeQuery(FilterEventAdapter.java:302)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.wall.WallFilter.statement_executeQuery(WallFilter.java:498)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.filter.FilterAdapter.statement_executeQuery(FilterAdapter.java:2481)
	at com.alibaba.druid.filter.FilterEventAdapter.statement_executeQuery(FilterEventAdapter.java:302)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.proxy.jdbc.StatementProxyImpl.executeQuery(StatementProxyImpl.java:211)
	at com.alibaba.druid.pool.DruidAbstractDataSource.validateConnection(DruidAbstractDataSource.java:1229)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1439)
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:618)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:915)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:911)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:98)
	at org.springframework.jdbc.datasource.DataSourceTransactionManager.doBegin(DataSourceTransactionManager.java:262)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:378)
	at org.springframework.test.context.transaction.TransactionContext.startTransaction(TransactionContext.java:103)
	at org.springframework.test.context.transaction.TransactionalTestExecutionListener.beforeTestMethod(TransactionalTestExecutionListener.java:192)
	at org.springframework.test.context.TestContextManager.beforeTestMethod(TestContextManager.java:291)
	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:74)
	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86)
	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:251)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:97)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:190)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
2020-07-03 16:59:24  [ main:63 ] - [ ERROR ]  dataSource init error
com.microsoft.sqlserver.jdbc.SQLServerException: 对象名 'DUAL' 无效。
	at com.microsoft.sqlserver.jdbc.SQLServerException.makeFromDatabaseError(SQLServerException.java:254)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.getNextResult(SQLServerStatement.java:1608)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.doExecuteStatement(SQLServerStatement.java:859)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement$StmtExecCmd.doExecute(SQLServerStatement.java:759)
	at com.microsoft.sqlserver.jdbc.TDSCommand.execute(IOBuffer.java:7240)
	at com.microsoft.sqlserver.jdbc.SQLServerConnection.executeCommand(SQLServerConnection.java:2869)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeCommand(SQLServerStatement.java:243)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeStatement(SQLServerStatement.java:218)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeQuery(SQLServerStatement.java:688)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2363)
	at com.alibaba.druid.filter.FilterAdapter.statement_executeQuery(FilterAdapter.java:2481)
	at com.alibaba.druid.filter.FilterEventAdapter.statement_executeQuery(FilterEventAdapter.java:302)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.wall.WallFilter.statement_executeQuery(WallFilter.java:498)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.filter.FilterAdapter.statement_executeQuery(FilterAdapter.java:2481)
	at com.alibaba.druid.filter.FilterEventAdapter.statement_executeQuery(FilterEventAdapter.java:302)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.proxy.jdbc.StatementProxyImpl.executeQuery(StatementProxyImpl.java:211)
	at com.alibaba.druid.pool.DruidAbstractDataSource.validateConnection(DruidAbstractDataSource.java:1229)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1439)
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:618)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:915)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:911)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:98)
	at org.springframework.jdbc.datasource.DataSourceTransactionManager.doBegin(DataSourceTransactionManager.java:262)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:378)
	at org.springframework.test.context.transaction.TransactionContext.startTransaction(TransactionContext.java:103)
	at org.springframework.test.context.transaction.TransactionalTestExecutionListener.beforeTestMethod(TransactionalTestExecutionListener.java:192)
	at org.springframework.test.context.TestContextManager.beforeTestMethod(TestContextManager.java:291)
	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:74)
	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86)
	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:251)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:97)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:190)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
2020-07-03 16:59:24  [ main:67 ] - [ INFO ]  {dataSource-1} inited
2020-07-03 16:59:24  [ Thread-2:140 ] - [ INFO ]  {dataSource-1} closed
2020-07-03 17:06:01  [ main:1 ] - [ DEBUG ]  {conn-10001} connected
2020-07-03 17:06:01  [ main:11 ] - [ DEBUG ]  {conn-10001, stmt-20000} created
2020-07-03 17:06:01  [ main:62 ] - [ ERROR ]  {conn-10001, stmt-20000} execute error. SELECT 1 FROM DUAL
com.microsoft.sqlserver.jdbc.SQLServerException: 对象名 'DUAL' 无效。
	at com.microsoft.sqlserver.jdbc.SQLServerException.makeFromDatabaseError(SQLServerException.java:254)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.getNextResult(SQLServerStatement.java:1608)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.doExecuteStatement(SQLServerStatement.java:859)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement$StmtExecCmd.doExecute(SQLServerStatement.java:759)
	at com.microsoft.sqlserver.jdbc.TDSCommand.execute(IOBuffer.java:7240)
	at com.microsoft.sqlserver.jdbc.SQLServerConnection.executeCommand(SQLServerConnection.java:2869)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeCommand(SQLServerStatement.java:243)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeStatement(SQLServerStatement.java:218)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeQuery(SQLServerStatement.java:688)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2363)
	at com.alibaba.druid.filter.FilterAdapter.statement_executeQuery(FilterAdapter.java:2481)
	at com.alibaba.druid.filter.FilterEventAdapter.statement_executeQuery(FilterEventAdapter.java:302)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.wall.WallFilter.statement_executeQuery(WallFilter.java:498)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.filter.FilterAdapter.statement_executeQuery(FilterAdapter.java:2481)
	at com.alibaba.druid.filter.FilterEventAdapter.statement_executeQuery(FilterEventAdapter.java:302)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.proxy.jdbc.StatementProxyImpl.executeQuery(StatementProxyImpl.java:211)
	at com.alibaba.druid.pool.DruidAbstractDataSource.validateConnection(DruidAbstractDataSource.java:1229)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1439)
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:618)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:915)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:911)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:98)
	at org.springframework.jdbc.datasource.DataSourceTransactionManager.doBegin(DataSourceTransactionManager.java:262)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:378)
	at org.springframework.test.context.transaction.TransactionContext.startTransaction(TransactionContext.java:103)
	at org.springframework.test.context.transaction.TransactionalTestExecutionListener.beforeTestMethod(TransactionalTestExecutionListener.java:192)
	at org.springframework.test.context.TestContextManager.beforeTestMethod(TestContextManager.java:291)
	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:74)
	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86)
	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:251)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:97)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:190)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
2020-07-03 17:06:01  [ main:67 ] - [ DEBUG ]  {conn-10001, stmt-20000} closed
2020-07-03 17:06:01  [ main:67 ] - [ ERROR ]  init datasource error
com.microsoft.sqlserver.jdbc.SQLServerException: 对象名 'DUAL' 无效。
	at com.microsoft.sqlserver.jdbc.SQLServerException.makeFromDatabaseError(SQLServerException.java:254)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.getNextResult(SQLServerStatement.java:1608)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.doExecuteStatement(SQLServerStatement.java:859)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement$StmtExecCmd.doExecute(SQLServerStatement.java:759)
	at com.microsoft.sqlserver.jdbc.TDSCommand.execute(IOBuffer.java:7240)
	at com.microsoft.sqlserver.jdbc.SQLServerConnection.executeCommand(SQLServerConnection.java:2869)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeCommand(SQLServerStatement.java:243)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeStatement(SQLServerStatement.java:218)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeQuery(SQLServerStatement.java:688)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2363)
	at com.alibaba.druid.filter.FilterAdapter.statement_executeQuery(FilterAdapter.java:2481)
	at com.alibaba.druid.filter.FilterEventAdapter.statement_executeQuery(FilterEventAdapter.java:302)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.wall.WallFilter.statement_executeQuery(WallFilter.java:498)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.filter.FilterAdapter.statement_executeQuery(FilterAdapter.java:2481)
	at com.alibaba.druid.filter.FilterEventAdapter.statement_executeQuery(FilterEventAdapter.java:302)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.proxy.jdbc.StatementProxyImpl.executeQuery(StatementProxyImpl.java:211)
	at com.alibaba.druid.pool.DruidAbstractDataSource.validateConnection(DruidAbstractDataSource.java:1229)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1439)
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:618)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:915)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:911)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:98)
	at org.springframework.jdbc.datasource.DataSourceTransactionManager.doBegin(DataSourceTransactionManager.java:262)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:378)
	at org.springframework.test.context.transaction.TransactionContext.startTransaction(TransactionContext.java:103)
	at org.springframework.test.context.transaction.TransactionalTestExecutionListener.beforeTestMethod(TransactionalTestExecutionListener.java:192)
	at org.springframework.test.context.TestContextManager.beforeTestMethod(TestContextManager.java:291)
	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:74)
	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86)
	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:251)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:97)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:190)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
2020-07-03 17:06:01  [ main:80 ] - [ ERROR ]  dataSource init error
com.microsoft.sqlserver.jdbc.SQLServerException: 对象名 'DUAL' 无效。
	at com.microsoft.sqlserver.jdbc.SQLServerException.makeFromDatabaseError(SQLServerException.java:254)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.getNextResult(SQLServerStatement.java:1608)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.doExecuteStatement(SQLServerStatement.java:859)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement$StmtExecCmd.doExecute(SQLServerStatement.java:759)
	at com.microsoft.sqlserver.jdbc.TDSCommand.execute(IOBuffer.java:7240)
	at com.microsoft.sqlserver.jdbc.SQLServerConnection.executeCommand(SQLServerConnection.java:2869)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeCommand(SQLServerStatement.java:243)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeStatement(SQLServerStatement.java:218)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeQuery(SQLServerStatement.java:688)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2363)
	at com.alibaba.druid.filter.FilterAdapter.statement_executeQuery(FilterAdapter.java:2481)
	at com.alibaba.druid.filter.FilterEventAdapter.statement_executeQuery(FilterEventAdapter.java:302)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.wall.WallFilter.statement_executeQuery(WallFilter.java:498)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.filter.FilterAdapter.statement_executeQuery(FilterAdapter.java:2481)
	at com.alibaba.druid.filter.FilterEventAdapter.statement_executeQuery(FilterEventAdapter.java:302)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.proxy.jdbc.StatementProxyImpl.executeQuery(StatementProxyImpl.java:211)
	at com.alibaba.druid.pool.DruidAbstractDataSource.validateConnection(DruidAbstractDataSource.java:1229)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1439)
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:618)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:915)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:911)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:98)
	at org.springframework.jdbc.datasource.DataSourceTransactionManager.doBegin(DataSourceTransactionManager.java:262)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:378)
	at org.springframework.test.context.transaction.TransactionContext.startTransaction(TransactionContext.java:103)
	at org.springframework.test.context.transaction.TransactionalTestExecutionListener.beforeTestMethod(TransactionalTestExecutionListener.java:192)
	at org.springframework.test.context.TestContextManager.beforeTestMethod(TestContextManager.java:291)
	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:74)
	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86)
	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:251)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:97)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:190)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
2020-07-03 17:06:01  [ main:82 ] - [ INFO ]  {dataSource-1} inited
2020-07-03 17:06:01  [ Thread-2:176 ] - [ INFO ]  {dataSource-1} closed
2020-07-03 17:12:22  [ main:0 ] - [ DEBUG ]  {conn-10001} connected
2020-07-03 17:12:22  [ main:8 ] - [ DEBUG ]  {conn-10001, stmt-20000} created
2020-07-03 17:12:22  [ main:50 ] - [ ERROR ]  {conn-10001, stmt-20000} execute error. SELECT 1 FROM DUAL
com.microsoft.sqlserver.jdbc.SQLServerException: 对象名 'DUAL' 无效。
	at com.microsoft.sqlserver.jdbc.SQLServerException.makeFromDatabaseError(SQLServerException.java:254)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.getNextResult(SQLServerStatement.java:1608)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.doExecuteStatement(SQLServerStatement.java:859)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement$StmtExecCmd.doExecute(SQLServerStatement.java:759)
	at com.microsoft.sqlserver.jdbc.TDSCommand.execute(IOBuffer.java:7240)
	at com.microsoft.sqlserver.jdbc.SQLServerConnection.executeCommand(SQLServerConnection.java:2869)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeCommand(SQLServerStatement.java:243)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeStatement(SQLServerStatement.java:218)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeQuery(SQLServerStatement.java:688)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2363)
	at com.alibaba.druid.filter.FilterAdapter.statement_executeQuery(FilterAdapter.java:2481)
	at com.alibaba.druid.filter.FilterEventAdapter.statement_executeQuery(FilterEventAdapter.java:302)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.wall.WallFilter.statement_executeQuery(WallFilter.java:498)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.filter.FilterAdapter.statement_executeQuery(FilterAdapter.java:2481)
	at com.alibaba.druid.filter.FilterEventAdapter.statement_executeQuery(FilterEventAdapter.java:302)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.proxy.jdbc.StatementProxyImpl.executeQuery(StatementProxyImpl.java:211)
	at com.alibaba.druid.pool.DruidAbstractDataSource.validateConnection(DruidAbstractDataSource.java:1229)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1439)
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:618)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:915)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:911)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:98)
	at org.springframework.jdbc.datasource.DataSourceTransactionManager.doBegin(DataSourceTransactionManager.java:262)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:378)
	at org.springframework.test.context.transaction.TransactionContext.startTransaction(TransactionContext.java:103)
	at org.springframework.test.context.transaction.TransactionalTestExecutionListener.beforeTestMethod(TransactionalTestExecutionListener.java:192)
	at org.springframework.test.context.TestContextManager.beforeTestMethod(TestContextManager.java:291)
	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:74)
	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86)
	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:251)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:97)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:190)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
2020-07-03 17:12:22  [ main:57 ] - [ DEBUG ]  {conn-10001, stmt-20000} closed
2020-07-03 17:12:22  [ main:58 ] - [ ERROR ]  init datasource error
com.microsoft.sqlserver.jdbc.SQLServerException: 对象名 'DUAL' 无效。
	at com.microsoft.sqlserver.jdbc.SQLServerException.makeFromDatabaseError(SQLServerException.java:254)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.getNextResult(SQLServerStatement.java:1608)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.doExecuteStatement(SQLServerStatement.java:859)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement$StmtExecCmd.doExecute(SQLServerStatement.java:759)
	at com.microsoft.sqlserver.jdbc.TDSCommand.execute(IOBuffer.java:7240)
	at com.microsoft.sqlserver.jdbc.SQLServerConnection.executeCommand(SQLServerConnection.java:2869)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeCommand(SQLServerStatement.java:243)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeStatement(SQLServerStatement.java:218)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeQuery(SQLServerStatement.java:688)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2363)
	at com.alibaba.druid.filter.FilterAdapter.statement_executeQuery(FilterAdapter.java:2481)
	at com.alibaba.druid.filter.FilterEventAdapter.statement_executeQuery(FilterEventAdapter.java:302)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.wall.WallFilter.statement_executeQuery(WallFilter.java:498)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.filter.FilterAdapter.statement_executeQuery(FilterAdapter.java:2481)
	at com.alibaba.druid.filter.FilterEventAdapter.statement_executeQuery(FilterEventAdapter.java:302)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.proxy.jdbc.StatementProxyImpl.executeQuery(StatementProxyImpl.java:211)
	at com.alibaba.druid.pool.DruidAbstractDataSource.validateConnection(DruidAbstractDataSource.java:1229)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1439)
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:618)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:915)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:911)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:98)
	at org.springframework.jdbc.datasource.DataSourceTransactionManager.doBegin(DataSourceTransactionManager.java:262)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:378)
	at org.springframework.test.context.transaction.TransactionContext.startTransaction(TransactionContext.java:103)
	at org.springframework.test.context.transaction.TransactionalTestExecutionListener.beforeTestMethod(TransactionalTestExecutionListener.java:192)
	at org.springframework.test.context.TestContextManager.beforeTestMethod(TestContextManager.java:291)
	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:74)
	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86)
	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:251)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:97)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:190)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
2020-07-03 17:12:22  [ main:70 ] - [ ERROR ]  dataSource init error
com.microsoft.sqlserver.jdbc.SQLServerException: 对象名 'DUAL' 无效。
	at com.microsoft.sqlserver.jdbc.SQLServerException.makeFromDatabaseError(SQLServerException.java:254)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.getNextResult(SQLServerStatement.java:1608)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.doExecuteStatement(SQLServerStatement.java:859)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement$StmtExecCmd.doExecute(SQLServerStatement.java:759)
	at com.microsoft.sqlserver.jdbc.TDSCommand.execute(IOBuffer.java:7240)
	at com.microsoft.sqlserver.jdbc.SQLServerConnection.executeCommand(SQLServerConnection.java:2869)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeCommand(SQLServerStatement.java:243)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeStatement(SQLServerStatement.java:218)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeQuery(SQLServerStatement.java:688)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2363)
	at com.alibaba.druid.filter.FilterAdapter.statement_executeQuery(FilterAdapter.java:2481)
	at com.alibaba.druid.filter.FilterEventAdapter.statement_executeQuery(FilterEventAdapter.java:302)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.wall.WallFilter.statement_executeQuery(WallFilter.java:498)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.filter.FilterAdapter.statement_executeQuery(FilterAdapter.java:2481)
	at com.alibaba.druid.filter.FilterEventAdapter.statement_executeQuery(FilterEventAdapter.java:302)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.proxy.jdbc.StatementProxyImpl.executeQuery(StatementProxyImpl.java:211)
	at com.alibaba.druid.pool.DruidAbstractDataSource.validateConnection(DruidAbstractDataSource.java:1229)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1439)
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:618)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:915)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:911)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:98)
	at org.springframework.jdbc.datasource.DataSourceTransactionManager.doBegin(DataSourceTransactionManager.java:262)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:378)
	at org.springframework.test.context.transaction.TransactionContext.startTransaction(TransactionContext.java:103)
	at org.springframework.test.context.transaction.TransactionalTestExecutionListener.beforeTestMethod(TransactionalTestExecutionListener.java:192)
	at org.springframework.test.context.TestContextManager.beforeTestMethod(TestContextManager.java:291)
	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:74)
	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86)
	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:251)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:97)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:190)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
2020-07-03 17:12:22  [ main:72 ] - [ INFO ]  {dataSource-1} inited
2020-07-03 17:12:22  [ Thread-2:149 ] - [ INFO ]  {dataSource-1} closed
2020-07-03 17:17:40  [ main:0 ] - [ DEBUG ]  {conn-10001} connected
2020-07-03 17:17:40  [ main:8 ] - [ DEBUG ]  {conn-10001, stmt-20000} created
2020-07-03 17:17:40  [ main:51 ] - [ ERROR ]  {conn-10001, stmt-20000} execute error. SELECT 1 FROM DUAL
com.microsoft.sqlserver.jdbc.SQLServerException: 对象名 'DUAL' 无效。
	at com.microsoft.sqlserver.jdbc.SQLServerException.makeFromDatabaseError(SQLServerException.java:254)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.getNextResult(SQLServerStatement.java:1608)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.doExecuteStatement(SQLServerStatement.java:859)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement$StmtExecCmd.doExecute(SQLServerStatement.java:759)
	at com.microsoft.sqlserver.jdbc.TDSCommand.execute(IOBuffer.java:7240)
	at com.microsoft.sqlserver.jdbc.SQLServerConnection.executeCommand(SQLServerConnection.java:2869)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeCommand(SQLServerStatement.java:243)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeStatement(SQLServerStatement.java:218)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeQuery(SQLServerStatement.java:688)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2363)
	at com.alibaba.druid.filter.FilterAdapter.statement_executeQuery(FilterAdapter.java:2481)
	at com.alibaba.druid.filter.FilterEventAdapter.statement_executeQuery(FilterEventAdapter.java:302)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.wall.WallFilter.statement_executeQuery(WallFilter.java:498)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.filter.FilterAdapter.statement_executeQuery(FilterAdapter.java:2481)
	at com.alibaba.druid.filter.FilterEventAdapter.statement_executeQuery(FilterEventAdapter.java:302)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.proxy.jdbc.StatementProxyImpl.executeQuery(StatementProxyImpl.java:211)
	at com.alibaba.druid.pool.DruidAbstractDataSource.validateConnection(DruidAbstractDataSource.java:1229)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1439)
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:618)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:915)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:911)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:98)
	at org.springframework.jdbc.datasource.DataSourceTransactionManager.doBegin(DataSourceTransactionManager.java:262)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:378)
	at org.springframework.test.context.transaction.TransactionContext.startTransaction(TransactionContext.java:103)
	at org.springframework.test.context.transaction.TransactionalTestExecutionListener.beforeTestMethod(TransactionalTestExecutionListener.java:192)
	at org.springframework.test.context.TestContextManager.beforeTestMethod(TestContextManager.java:291)
	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:74)
	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86)
	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:251)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:97)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:190)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
2020-07-03 17:17:40  [ main:56 ] - [ DEBUG ]  {conn-10001, stmt-20000} closed
2020-07-03 17:17:40  [ main:57 ] - [ ERROR ]  init datasource error
com.microsoft.sqlserver.jdbc.SQLServerException: 对象名 'DUAL' 无效。
	at com.microsoft.sqlserver.jdbc.SQLServerException.makeFromDatabaseError(SQLServerException.java:254)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.getNextResult(SQLServerStatement.java:1608)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.doExecuteStatement(SQLServerStatement.java:859)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement$StmtExecCmd.doExecute(SQLServerStatement.java:759)
	at com.microsoft.sqlserver.jdbc.TDSCommand.execute(IOBuffer.java:7240)
	at com.microsoft.sqlserver.jdbc.SQLServerConnection.executeCommand(SQLServerConnection.java:2869)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeCommand(SQLServerStatement.java:243)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeStatement(SQLServerStatement.java:218)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeQuery(SQLServerStatement.java:688)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2363)
	at com.alibaba.druid.filter.FilterAdapter.statement_executeQuery(FilterAdapter.java:2481)
	at com.alibaba.druid.filter.FilterEventAdapter.statement_executeQuery(FilterEventAdapter.java:302)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.wall.WallFilter.statement_executeQuery(WallFilter.java:498)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.filter.FilterAdapter.statement_executeQuery(FilterAdapter.java:2481)
	at com.alibaba.druid.filter.FilterEventAdapter.statement_executeQuery(FilterEventAdapter.java:302)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.proxy.jdbc.StatementProxyImpl.executeQuery(StatementProxyImpl.java:211)
	at com.alibaba.druid.pool.DruidAbstractDataSource.validateConnection(DruidAbstractDataSource.java:1229)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1439)
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:618)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:915)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:911)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:98)
	at org.springframework.jdbc.datasource.DataSourceTransactionManager.doBegin(DataSourceTransactionManager.java:262)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:378)
	at org.springframework.test.context.transaction.TransactionContext.startTransaction(TransactionContext.java:103)
	at org.springframework.test.context.transaction.TransactionalTestExecutionListener.beforeTestMethod(TransactionalTestExecutionListener.java:192)
	at org.springframework.test.context.TestContextManager.beforeTestMethod(TestContextManager.java:291)
	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:74)
	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86)
	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:251)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:97)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:190)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
2020-07-03 17:17:40  [ main:65 ] - [ ERROR ]  dataSource init error
com.microsoft.sqlserver.jdbc.SQLServerException: 对象名 'DUAL' 无效。
	at com.microsoft.sqlserver.jdbc.SQLServerException.makeFromDatabaseError(SQLServerException.java:254)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.getNextResult(SQLServerStatement.java:1608)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.doExecuteStatement(SQLServerStatement.java:859)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement$StmtExecCmd.doExecute(SQLServerStatement.java:759)
	at com.microsoft.sqlserver.jdbc.TDSCommand.execute(IOBuffer.java:7240)
	at com.microsoft.sqlserver.jdbc.SQLServerConnection.executeCommand(SQLServerConnection.java:2869)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeCommand(SQLServerStatement.java:243)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeStatement(SQLServerStatement.java:218)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeQuery(SQLServerStatement.java:688)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2363)
	at com.alibaba.druid.filter.FilterAdapter.statement_executeQuery(FilterAdapter.java:2481)
	at com.alibaba.druid.filter.FilterEventAdapter.statement_executeQuery(FilterEventAdapter.java:302)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.wall.WallFilter.statement_executeQuery(WallFilter.java:498)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.filter.FilterAdapter.statement_executeQuery(FilterAdapter.java:2481)
	at com.alibaba.druid.filter.FilterEventAdapter.statement_executeQuery(FilterEventAdapter.java:302)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.proxy.jdbc.StatementProxyImpl.executeQuery(StatementProxyImpl.java:211)
	at com.alibaba.druid.pool.DruidAbstractDataSource.validateConnection(DruidAbstractDataSource.java:1229)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1439)
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:618)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:915)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:911)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:98)
	at org.springframework.jdbc.datasource.DataSourceTransactionManager.doBegin(DataSourceTransactionManager.java:262)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:378)
	at org.springframework.test.context.transaction.TransactionContext.startTransaction(TransactionContext.java:103)
	at org.springframework.test.context.transaction.TransactionalTestExecutionListener.beforeTestMethod(TransactionalTestExecutionListener.java:192)
	at org.springframework.test.context.TestContextManager.beforeTestMethod(TestContextManager.java:291)
	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:74)
	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86)
	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:251)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:97)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:190)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
2020-07-03 17:17:40  [ main:67 ] - [ INFO ]  {dataSource-1} inited
2020-07-03 17:17:40  [ Thread-2:153 ] - [ INFO ]  {dataSource-1} closed
2020-07-03 17:17:58  [ main:0 ] - [ DEBUG ]  {conn-10001} connected
2020-07-03 17:17:58  [ main:7 ] - [ DEBUG ]  {conn-10001, stmt-20000} created
2020-07-03 17:17:59  [ main:47 ] - [ ERROR ]  {conn-10001, stmt-20000} execute error. SELECT 1 FROM DUAL
com.microsoft.sqlserver.jdbc.SQLServerException: 对象名 'DUAL' 无效。
	at com.microsoft.sqlserver.jdbc.SQLServerException.makeFromDatabaseError(SQLServerException.java:254)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.getNextResult(SQLServerStatement.java:1608)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.doExecuteStatement(SQLServerStatement.java:859)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement$StmtExecCmd.doExecute(SQLServerStatement.java:759)
	at com.microsoft.sqlserver.jdbc.TDSCommand.execute(IOBuffer.java:7240)
	at com.microsoft.sqlserver.jdbc.SQLServerConnection.executeCommand(SQLServerConnection.java:2869)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeCommand(SQLServerStatement.java:243)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeStatement(SQLServerStatement.java:218)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeQuery(SQLServerStatement.java:688)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2363)
	at com.alibaba.druid.filter.FilterAdapter.statement_executeQuery(FilterAdapter.java:2481)
	at com.alibaba.druid.filter.FilterEventAdapter.statement_executeQuery(FilterEventAdapter.java:302)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.wall.WallFilter.statement_executeQuery(WallFilter.java:498)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.filter.FilterAdapter.statement_executeQuery(FilterAdapter.java:2481)
	at com.alibaba.druid.filter.FilterEventAdapter.statement_executeQuery(FilterEventAdapter.java:302)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.proxy.jdbc.StatementProxyImpl.executeQuery(StatementProxyImpl.java:211)
	at com.alibaba.druid.pool.DruidAbstractDataSource.validateConnection(DruidAbstractDataSource.java:1229)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1439)
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:618)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:915)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:911)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:98)
	at org.springframework.jdbc.datasource.DataSourceTransactionManager.doBegin(DataSourceTransactionManager.java:262)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:378)
	at org.springframework.test.context.transaction.TransactionContext.startTransaction(TransactionContext.java:103)
	at org.springframework.test.context.transaction.TransactionalTestExecutionListener.beforeTestMethod(TransactionalTestExecutionListener.java:192)
	at org.springframework.test.context.TestContextManager.beforeTestMethod(TestContextManager.java:291)
	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:74)
	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86)
	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:251)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:97)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:190)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
2020-07-03 17:17:59  [ main:54 ] - [ DEBUG ]  {conn-10001, stmt-20000} closed
2020-07-03 17:17:59  [ main:54 ] - [ ERROR ]  init datasource error
com.microsoft.sqlserver.jdbc.SQLServerException: 对象名 'DUAL' 无效。
	at com.microsoft.sqlserver.jdbc.SQLServerException.makeFromDatabaseError(SQLServerException.java:254)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.getNextResult(SQLServerStatement.java:1608)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.doExecuteStatement(SQLServerStatement.java:859)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement$StmtExecCmd.doExecute(SQLServerStatement.java:759)
	at com.microsoft.sqlserver.jdbc.TDSCommand.execute(IOBuffer.java:7240)
	at com.microsoft.sqlserver.jdbc.SQLServerConnection.executeCommand(SQLServerConnection.java:2869)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeCommand(SQLServerStatement.java:243)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeStatement(SQLServerStatement.java:218)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeQuery(SQLServerStatement.java:688)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2363)
	at com.alibaba.druid.filter.FilterAdapter.statement_executeQuery(FilterAdapter.java:2481)
	at com.alibaba.druid.filter.FilterEventAdapter.statement_executeQuery(FilterEventAdapter.java:302)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.wall.WallFilter.statement_executeQuery(WallFilter.java:498)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.filter.FilterAdapter.statement_executeQuery(FilterAdapter.java:2481)
	at com.alibaba.druid.filter.FilterEventAdapter.statement_executeQuery(FilterEventAdapter.java:302)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.proxy.jdbc.StatementProxyImpl.executeQuery(StatementProxyImpl.java:211)
	at com.alibaba.druid.pool.DruidAbstractDataSource.validateConnection(DruidAbstractDataSource.java:1229)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1439)
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:618)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:915)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:911)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:98)
	at org.springframework.jdbc.datasource.DataSourceTransactionManager.doBegin(DataSourceTransactionManager.java:262)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:378)
	at org.springframework.test.context.transaction.TransactionContext.startTransaction(TransactionContext.java:103)
	at org.springframework.test.context.transaction.TransactionalTestExecutionListener.beforeTestMethod(TransactionalTestExecutionListener.java:192)
	at org.springframework.test.context.TestContextManager.beforeTestMethod(TestContextManager.java:291)
	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:74)
	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86)
	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:251)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:97)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:190)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
2020-07-03 17:17:59  [ main:65 ] - [ ERROR ]  dataSource init error
com.microsoft.sqlserver.jdbc.SQLServerException: 对象名 'DUAL' 无效。
	at com.microsoft.sqlserver.jdbc.SQLServerException.makeFromDatabaseError(SQLServerException.java:254)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.getNextResult(SQLServerStatement.java:1608)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.doExecuteStatement(SQLServerStatement.java:859)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement$StmtExecCmd.doExecute(SQLServerStatement.java:759)
	at com.microsoft.sqlserver.jdbc.TDSCommand.execute(IOBuffer.java:7240)
	at com.microsoft.sqlserver.jdbc.SQLServerConnection.executeCommand(SQLServerConnection.java:2869)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeCommand(SQLServerStatement.java:243)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeStatement(SQLServerStatement.java:218)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeQuery(SQLServerStatement.java:688)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2363)
	at com.alibaba.druid.filter.FilterAdapter.statement_executeQuery(FilterAdapter.java:2481)
	at com.alibaba.druid.filter.FilterEventAdapter.statement_executeQuery(FilterEventAdapter.java:302)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.wall.WallFilter.statement_executeQuery(WallFilter.java:498)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.filter.FilterAdapter.statement_executeQuery(FilterAdapter.java:2481)
	at com.alibaba.druid.filter.FilterEventAdapter.statement_executeQuery(FilterEventAdapter.java:302)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.proxy.jdbc.StatementProxyImpl.executeQuery(StatementProxyImpl.java:211)
	at com.alibaba.druid.pool.DruidAbstractDataSource.validateConnection(DruidAbstractDataSource.java:1229)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1439)
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:618)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:915)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:911)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:98)
	at org.springframework.jdbc.datasource.DataSourceTransactionManager.doBegin(DataSourceTransactionManager.java:262)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:378)
	at org.springframework.test.context.transaction.TransactionContext.startTransaction(TransactionContext.java:103)
	at org.springframework.test.context.transaction.TransactionalTestExecutionListener.beforeTestMethod(TransactionalTestExecutionListener.java:192)
	at org.springframework.test.context.TestContextManager.beforeTestMethod(TestContextManager.java:291)
	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:74)
	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86)
	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:251)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:97)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:190)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
2020-07-03 17:17:59  [ main:68 ] - [ INFO ]  {dataSource-1} inited
2020-07-03 17:17:59  [ Thread-2:142 ] - [ INFO ]  {dataSource-1} closed
2020-07-03 17:20:28  [ main:0 ] - [ DEBUG ]  {conn-10001} connected
2020-07-03 17:20:28  [ main:8 ] - [ DEBUG ]  {conn-10001, stmt-20000} created
2020-07-03 17:20:28  [ main:49 ] - [ ERROR ]  {conn-10001, stmt-20000} execute error. SELECT 1 FROM DUAL
com.microsoft.sqlserver.jdbc.SQLServerException: 对象名 'DUAL' 无效。
	at com.microsoft.sqlserver.jdbc.SQLServerException.makeFromDatabaseError(SQLServerException.java:254)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.getNextResult(SQLServerStatement.java:1608)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.doExecuteStatement(SQLServerStatement.java:859)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement$StmtExecCmd.doExecute(SQLServerStatement.java:759)
	at com.microsoft.sqlserver.jdbc.TDSCommand.execute(IOBuffer.java:7240)
	at com.microsoft.sqlserver.jdbc.SQLServerConnection.executeCommand(SQLServerConnection.java:2869)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeCommand(SQLServerStatement.java:243)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeStatement(SQLServerStatement.java:218)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeQuery(SQLServerStatement.java:688)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2363)
	at com.alibaba.druid.filter.FilterAdapter.statement_executeQuery(FilterAdapter.java:2481)
	at com.alibaba.druid.filter.FilterEventAdapter.statement_executeQuery(FilterEventAdapter.java:302)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.wall.WallFilter.statement_executeQuery(WallFilter.java:498)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.filter.FilterAdapter.statement_executeQuery(FilterAdapter.java:2481)
	at com.alibaba.druid.filter.FilterEventAdapter.statement_executeQuery(FilterEventAdapter.java:302)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.proxy.jdbc.StatementProxyImpl.executeQuery(StatementProxyImpl.java:211)
	at com.alibaba.druid.pool.DruidAbstractDataSource.validateConnection(DruidAbstractDataSource.java:1229)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1439)
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:618)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:915)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:911)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:98)
	at org.springframework.jdbc.datasource.DataSourceTransactionManager.doBegin(DataSourceTransactionManager.java:262)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:378)
	at org.springframework.test.context.transaction.TransactionContext.startTransaction(TransactionContext.java:103)
	at org.springframework.test.context.transaction.TransactionalTestExecutionListener.beforeTestMethod(TransactionalTestExecutionListener.java:192)
	at org.springframework.test.context.TestContextManager.beforeTestMethod(TestContextManager.java:291)
	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:74)
	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86)
	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:251)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:97)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:190)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
2020-07-03 17:20:28  [ main:56 ] - [ DEBUG ]  {conn-10001, stmt-20000} closed
2020-07-03 17:20:28  [ main:56 ] - [ ERROR ]  init datasource error
com.microsoft.sqlserver.jdbc.SQLServerException: 对象名 'DUAL' 无效。
	at com.microsoft.sqlserver.jdbc.SQLServerException.makeFromDatabaseError(SQLServerException.java:254)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.getNextResult(SQLServerStatement.java:1608)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.doExecuteStatement(SQLServerStatement.java:859)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement$StmtExecCmd.doExecute(SQLServerStatement.java:759)
	at com.microsoft.sqlserver.jdbc.TDSCommand.execute(IOBuffer.java:7240)
	at com.microsoft.sqlserver.jdbc.SQLServerConnection.executeCommand(SQLServerConnection.java:2869)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeCommand(SQLServerStatement.java:243)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeStatement(SQLServerStatement.java:218)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeQuery(SQLServerStatement.java:688)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2363)
	at com.alibaba.druid.filter.FilterAdapter.statement_executeQuery(FilterAdapter.java:2481)
	at com.alibaba.druid.filter.FilterEventAdapter.statement_executeQuery(FilterEventAdapter.java:302)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.wall.WallFilter.statement_executeQuery(WallFilter.java:498)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.filter.FilterAdapter.statement_executeQuery(FilterAdapter.java:2481)
	at com.alibaba.druid.filter.FilterEventAdapter.statement_executeQuery(FilterEventAdapter.java:302)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.proxy.jdbc.StatementProxyImpl.executeQuery(StatementProxyImpl.java:211)
	at com.alibaba.druid.pool.DruidAbstractDataSource.validateConnection(DruidAbstractDataSource.java:1229)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1439)
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:618)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:915)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:911)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:98)
	at org.springframework.jdbc.datasource.DataSourceTransactionManager.doBegin(DataSourceTransactionManager.java:262)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:378)
	at org.springframework.test.context.transaction.TransactionContext.startTransaction(TransactionContext.java:103)
	at org.springframework.test.context.transaction.TransactionalTestExecutionListener.beforeTestMethod(TransactionalTestExecutionListener.java:192)
	at org.springframework.test.context.TestContextManager.beforeTestMethod(TestContextManager.java:291)
	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:74)
	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86)
	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:251)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:97)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:190)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
2020-07-03 17:20:28  [ main:63 ] - [ ERROR ]  dataSource init error
com.microsoft.sqlserver.jdbc.SQLServerException: 对象名 'DUAL' 无效。
	at com.microsoft.sqlserver.jdbc.SQLServerException.makeFromDatabaseError(SQLServerException.java:254)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.getNextResult(SQLServerStatement.java:1608)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.doExecuteStatement(SQLServerStatement.java:859)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement$StmtExecCmd.doExecute(SQLServerStatement.java:759)
	at com.microsoft.sqlserver.jdbc.TDSCommand.execute(IOBuffer.java:7240)
	at com.microsoft.sqlserver.jdbc.SQLServerConnection.executeCommand(SQLServerConnection.java:2869)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeCommand(SQLServerStatement.java:243)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeStatement(SQLServerStatement.java:218)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeQuery(SQLServerStatement.java:688)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2363)
	at com.alibaba.druid.filter.FilterAdapter.statement_executeQuery(FilterAdapter.java:2481)
	at com.alibaba.druid.filter.FilterEventAdapter.statement_executeQuery(FilterEventAdapter.java:302)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.wall.WallFilter.statement_executeQuery(WallFilter.java:498)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.filter.FilterAdapter.statement_executeQuery(FilterAdapter.java:2481)
	at com.alibaba.druid.filter.FilterEventAdapter.statement_executeQuery(FilterEventAdapter.java:302)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.proxy.jdbc.StatementProxyImpl.executeQuery(StatementProxyImpl.java:211)
	at com.alibaba.druid.pool.DruidAbstractDataSource.validateConnection(DruidAbstractDataSource.java:1229)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1439)
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:618)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:915)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:911)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:98)
	at org.springframework.jdbc.datasource.DataSourceTransactionManager.doBegin(DataSourceTransactionManager.java:262)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:378)
	at org.springframework.test.context.transaction.TransactionContext.startTransaction(TransactionContext.java:103)
	at org.springframework.test.context.transaction.TransactionalTestExecutionListener.beforeTestMethod(TransactionalTestExecutionListener.java:192)
	at org.springframework.test.context.TestContextManager.beforeTestMethod(TestContextManager.java:291)
	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:74)
	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86)
	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:251)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:97)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:190)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
2020-07-03 17:20:28  [ main:67 ] - [ INFO ]  {dataSource-1} inited
2020-07-03 17:20:28  [ Thread-2:144 ] - [ INFO ]  {dataSource-1} closed
2020-07-03 17:21:34  [ main:0 ] - [ DEBUG ]  {conn-10001} connected
2020-07-03 17:21:34  [ main:10 ] - [ DEBUG ]  {conn-10001, stmt-20000} created
2020-07-03 17:21:34  [ main:59 ] - [ ERROR ]  {conn-10001, stmt-20000} execute error. SELECT 1 FROM DUAL
com.microsoft.sqlserver.jdbc.SQLServerException: 对象名 'DUAL' 无效。
	at com.microsoft.sqlserver.jdbc.SQLServerException.makeFromDatabaseError(SQLServerException.java:254)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.getNextResult(SQLServerStatement.java:1608)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.doExecuteStatement(SQLServerStatement.java:859)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement$StmtExecCmd.doExecute(SQLServerStatement.java:759)
	at com.microsoft.sqlserver.jdbc.TDSCommand.execute(IOBuffer.java:7240)
	at com.microsoft.sqlserver.jdbc.SQLServerConnection.executeCommand(SQLServerConnection.java:2869)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeCommand(SQLServerStatement.java:243)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeStatement(SQLServerStatement.java:218)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeQuery(SQLServerStatement.java:688)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2363)
	at com.alibaba.druid.filter.FilterAdapter.statement_executeQuery(FilterAdapter.java:2481)
	at com.alibaba.druid.filter.FilterEventAdapter.statement_executeQuery(FilterEventAdapter.java:302)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.wall.WallFilter.statement_executeQuery(WallFilter.java:498)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.filter.FilterAdapter.statement_executeQuery(FilterAdapter.java:2481)
	at com.alibaba.druid.filter.FilterEventAdapter.statement_executeQuery(FilterEventAdapter.java:302)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.proxy.jdbc.StatementProxyImpl.executeQuery(StatementProxyImpl.java:211)
	at com.alibaba.druid.pool.DruidAbstractDataSource.validateConnection(DruidAbstractDataSource.java:1229)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1439)
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:618)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:915)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:911)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:98)
	at org.springframework.jdbc.datasource.DataSourceTransactionManager.doBegin(DataSourceTransactionManager.java:262)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:378)
	at org.springframework.test.context.transaction.TransactionContext.startTransaction(TransactionContext.java:103)
	at org.springframework.test.context.transaction.TransactionalTestExecutionListener.beforeTestMethod(TransactionalTestExecutionListener.java:192)
	at org.springframework.test.context.TestContextManager.beforeTestMethod(TestContextManager.java:291)
	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:74)
	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86)
	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:251)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:97)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:190)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
2020-07-03 17:21:34  [ main:65 ] - [ DEBUG ]  {conn-10001, stmt-20000} closed
2020-07-03 17:21:34  [ main:66 ] - [ ERROR ]  init datasource error
com.microsoft.sqlserver.jdbc.SQLServerException: 对象名 'DUAL' 无效。
	at com.microsoft.sqlserver.jdbc.SQLServerException.makeFromDatabaseError(SQLServerException.java:254)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.getNextResult(SQLServerStatement.java:1608)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.doExecuteStatement(SQLServerStatement.java:859)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement$StmtExecCmd.doExecute(SQLServerStatement.java:759)
	at com.microsoft.sqlserver.jdbc.TDSCommand.execute(IOBuffer.java:7240)
	at com.microsoft.sqlserver.jdbc.SQLServerConnection.executeCommand(SQLServerConnection.java:2869)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeCommand(SQLServerStatement.java:243)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeStatement(SQLServerStatement.java:218)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeQuery(SQLServerStatement.java:688)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2363)
	at com.alibaba.druid.filter.FilterAdapter.statement_executeQuery(FilterAdapter.java:2481)
	at com.alibaba.druid.filter.FilterEventAdapter.statement_executeQuery(FilterEventAdapter.java:302)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.wall.WallFilter.statement_executeQuery(WallFilter.java:498)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.filter.FilterAdapter.statement_executeQuery(FilterAdapter.java:2481)
	at com.alibaba.druid.filter.FilterEventAdapter.statement_executeQuery(FilterEventAdapter.java:302)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.proxy.jdbc.StatementProxyImpl.executeQuery(StatementProxyImpl.java:211)
	at com.alibaba.druid.pool.DruidAbstractDataSource.validateConnection(DruidAbstractDataSource.java:1229)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1439)
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:618)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:915)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:911)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:98)
	at org.springframework.jdbc.datasource.DataSourceTransactionManager.doBegin(DataSourceTransactionManager.java:262)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:378)
	at org.springframework.test.context.transaction.TransactionContext.startTransaction(TransactionContext.java:103)
	at org.springframework.test.context.transaction.TransactionalTestExecutionListener.beforeTestMethod(TransactionalTestExecutionListener.java:192)
	at org.springframework.test.context.TestContextManager.beforeTestMethod(TestContextManager.java:291)
	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:74)
	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86)
	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:251)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:97)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:190)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
2020-07-03 17:21:34  [ main:75 ] - [ ERROR ]  dataSource init error
com.microsoft.sqlserver.jdbc.SQLServerException: 对象名 'DUAL' 无效。
	at com.microsoft.sqlserver.jdbc.SQLServerException.makeFromDatabaseError(SQLServerException.java:254)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.getNextResult(SQLServerStatement.java:1608)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.doExecuteStatement(SQLServerStatement.java:859)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement$StmtExecCmd.doExecute(SQLServerStatement.java:759)
	at com.microsoft.sqlserver.jdbc.TDSCommand.execute(IOBuffer.java:7240)
	at com.microsoft.sqlserver.jdbc.SQLServerConnection.executeCommand(SQLServerConnection.java:2869)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeCommand(SQLServerStatement.java:243)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeStatement(SQLServerStatement.java:218)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeQuery(SQLServerStatement.java:688)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2363)
	at com.alibaba.druid.filter.FilterAdapter.statement_executeQuery(FilterAdapter.java:2481)
	at com.alibaba.druid.filter.FilterEventAdapter.statement_executeQuery(FilterEventAdapter.java:302)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.wall.WallFilter.statement_executeQuery(WallFilter.java:498)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.filter.FilterAdapter.statement_executeQuery(FilterAdapter.java:2481)
	at com.alibaba.druid.filter.FilterEventAdapter.statement_executeQuery(FilterEventAdapter.java:302)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.proxy.jdbc.StatementProxyImpl.executeQuery(StatementProxyImpl.java:211)
	at com.alibaba.druid.pool.DruidAbstractDataSource.validateConnection(DruidAbstractDataSource.java:1229)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1439)
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:618)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:915)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:911)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:98)
	at org.springframework.jdbc.datasource.DataSourceTransactionManager.doBegin(DataSourceTransactionManager.java:262)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:378)
	at org.springframework.test.context.transaction.TransactionContext.startTransaction(TransactionContext.java:103)
	at org.springframework.test.context.transaction.TransactionalTestExecutionListener.beforeTestMethod(TransactionalTestExecutionListener.java:192)
	at org.springframework.test.context.TestContextManager.beforeTestMethod(TestContextManager.java:291)
	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:74)
	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86)
	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:251)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:97)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:190)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
2020-07-03 17:21:34  [ main:82 ] - [ INFO ]  {dataSource-1} inited
2020-07-03 17:21:34  [ Thread-2:175 ] - [ INFO ]  {dataSource-1} closed
2020-07-03 17:25:14  [ main:0 ] - [ DEBUG ]  {conn-10001} connected
2020-07-03 17:25:14  [ main:8 ] - [ DEBUG ]  {conn-10001, stmt-20000} created
2020-07-03 17:25:14  [ main:49 ] - [ ERROR ]  {conn-10001, stmt-20000} execute error. SELECT 1 FROM DUAL
com.microsoft.sqlserver.jdbc.SQLServerException: 对象名 'DUAL' 无效。
	at com.microsoft.sqlserver.jdbc.SQLServerException.makeFromDatabaseError(SQLServerException.java:254)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.getNextResult(SQLServerStatement.java:1608)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.doExecuteStatement(SQLServerStatement.java:859)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement$StmtExecCmd.doExecute(SQLServerStatement.java:759)
	at com.microsoft.sqlserver.jdbc.TDSCommand.execute(IOBuffer.java:7240)
	at com.microsoft.sqlserver.jdbc.SQLServerConnection.executeCommand(SQLServerConnection.java:2869)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeCommand(SQLServerStatement.java:243)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeStatement(SQLServerStatement.java:218)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeQuery(SQLServerStatement.java:688)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2363)
	at com.alibaba.druid.filter.FilterAdapter.statement_executeQuery(FilterAdapter.java:2481)
	at com.alibaba.druid.filter.FilterEventAdapter.statement_executeQuery(FilterEventAdapter.java:302)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.wall.WallFilter.statement_executeQuery(WallFilter.java:498)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.filter.FilterAdapter.statement_executeQuery(FilterAdapter.java:2481)
	at com.alibaba.druid.filter.FilterEventAdapter.statement_executeQuery(FilterEventAdapter.java:302)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.proxy.jdbc.StatementProxyImpl.executeQuery(StatementProxyImpl.java:211)
	at com.alibaba.druid.pool.DruidAbstractDataSource.validateConnection(DruidAbstractDataSource.java:1229)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1439)
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:618)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:915)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:911)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:98)
	at org.springframework.jdbc.datasource.DataSourceTransactionManager.doBegin(DataSourceTransactionManager.java:262)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:378)
	at org.springframework.test.context.transaction.TransactionContext.startTransaction(TransactionContext.java:103)
	at org.springframework.test.context.transaction.TransactionalTestExecutionListener.beforeTestMethod(TransactionalTestExecutionListener.java:192)
	at org.springframework.test.context.TestContextManager.beforeTestMethod(TestContextManager.java:291)
	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:74)
	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86)
	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:251)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:97)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:190)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
2020-07-03 17:25:14  [ main:53 ] - [ DEBUG ]  {conn-10001, stmt-20000} closed
2020-07-03 17:25:14  [ main:54 ] - [ ERROR ]  init datasource error
com.microsoft.sqlserver.jdbc.SQLServerException: 对象名 'DUAL' 无效。
	at com.microsoft.sqlserver.jdbc.SQLServerException.makeFromDatabaseError(SQLServerException.java:254)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.getNextResult(SQLServerStatement.java:1608)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.doExecuteStatement(SQLServerStatement.java:859)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement$StmtExecCmd.doExecute(SQLServerStatement.java:759)
	at com.microsoft.sqlserver.jdbc.TDSCommand.execute(IOBuffer.java:7240)
	at com.microsoft.sqlserver.jdbc.SQLServerConnection.executeCommand(SQLServerConnection.java:2869)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeCommand(SQLServerStatement.java:243)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeStatement(SQLServerStatement.java:218)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeQuery(SQLServerStatement.java:688)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2363)
	at com.alibaba.druid.filter.FilterAdapter.statement_executeQuery(FilterAdapter.java:2481)
	at com.alibaba.druid.filter.FilterEventAdapter.statement_executeQuery(FilterEventAdapter.java:302)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.wall.WallFilter.statement_executeQuery(WallFilter.java:498)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.filter.FilterAdapter.statement_executeQuery(FilterAdapter.java:2481)
	at com.alibaba.druid.filter.FilterEventAdapter.statement_executeQuery(FilterEventAdapter.java:302)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.proxy.jdbc.StatementProxyImpl.executeQuery(StatementProxyImpl.java:211)
	at com.alibaba.druid.pool.DruidAbstractDataSource.validateConnection(DruidAbstractDataSource.java:1229)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1439)
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:618)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:915)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:911)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:98)
	at org.springframework.jdbc.datasource.DataSourceTransactionManager.doBegin(DataSourceTransactionManager.java:262)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:378)
	at org.springframework.test.context.transaction.TransactionContext.startTransaction(TransactionContext.java:103)
	at org.springframework.test.context.transaction.TransactionalTestExecutionListener.beforeTestMethod(TransactionalTestExecutionListener.java:192)
	at org.springframework.test.context.TestContextManager.beforeTestMethod(TestContextManager.java:291)
	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:74)
	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86)
	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:251)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:97)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:190)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
2020-07-03 17:25:14  [ main:59 ] - [ ERROR ]  dataSource init error
com.microsoft.sqlserver.jdbc.SQLServerException: 对象名 'DUAL' 无效。
	at com.microsoft.sqlserver.jdbc.SQLServerException.makeFromDatabaseError(SQLServerException.java:254)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.getNextResult(SQLServerStatement.java:1608)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.doExecuteStatement(SQLServerStatement.java:859)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement$StmtExecCmd.doExecute(SQLServerStatement.java:759)
	at com.microsoft.sqlserver.jdbc.TDSCommand.execute(IOBuffer.java:7240)
	at com.microsoft.sqlserver.jdbc.SQLServerConnection.executeCommand(SQLServerConnection.java:2869)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeCommand(SQLServerStatement.java:243)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeStatement(SQLServerStatement.java:218)
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeQuery(SQLServerStatement.java:688)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2363)
	at com.alibaba.druid.filter.FilterAdapter.statement_executeQuery(FilterAdapter.java:2481)
	at com.alibaba.druid.filter.FilterEventAdapter.statement_executeQuery(FilterEventAdapter.java:302)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.wall.WallFilter.statement_executeQuery(WallFilter.java:498)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.filter.FilterAdapter.statement_executeQuery(FilterAdapter.java:2481)
	at com.alibaba.druid.filter.FilterEventAdapter.statement_executeQuery(FilterEventAdapter.java:302)
	at com.alibaba.druid.filter.FilterChainImpl.statement_executeQuery(FilterChainImpl.java:2360)
	at com.alibaba.druid.proxy.jdbc.StatementProxyImpl.executeQuery(StatementProxyImpl.java:211)
	at com.alibaba.druid.pool.DruidAbstractDataSource.validateConnection(DruidAbstractDataSource.java:1229)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1439)
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:618)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:915)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:911)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:98)
	at org.springframework.jdbc.datasource.DataSourceTransactionManager.doBegin(DataSourceTransactionManager.java:262)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:378)
	at org.springframework.test.context.transaction.TransactionContext.startTransaction(TransactionContext.java:103)
	at org.springframework.test.context.transaction.TransactionalTestExecutionListener.beforeTestMethod(TransactionalTestExecutionListener.java:192)
	at org.springframework.test.context.TestContextManager.beforeTestMethod(TestContextManager.java:291)
	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:74)
	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86)
	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:251)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:97)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:190)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
2020-07-03 17:25:14  [ main:64 ] - [ INFO ]  {dataSource-1} inited
2020-07-03 17:25:14  [ Thread-2:142 ] - [ INFO ]  {dataSource-1} closed
2020-07-03 17:27:39  [ main:0 ] - [ DEBUG ]  {conn-10001} connected
2020-07-03 17:27:39  [ main:8 ] - [ DEBUG ]  {conn-10001, stmt-20000} created
2020-07-03 17:27:40  [ main:77 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} query executed. 68.221 millis. SELECT 1
2020-07-03 17:27:40  [ main:78 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} open
2020-07-03 17:27:40  [ main:79 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} Header: []
2020-07-03 17:27:40  [ main:86 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} Result: [1]
2020-07-03 17:27:40  [ main:87 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} closed
2020-07-03 17:27:40  [ main:87 ] - [ DEBUG ]  {conn-10001, stmt-20000} closed
2020-07-03 17:27:40  [ main:93 ] - [ DEBUG ]  {conn-10002} connected
2020-07-03 17:27:40  [ main:93 ] - [ DEBUG ]  {conn-10002, stmt-20001} created
2020-07-03 17:27:40  [ main:94 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} query executed. 0.6147 millis. SELECT 1
2020-07-03 17:27:40  [ main:94 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} open
2020-07-03 17:27:40  [ main:94 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} Header: []
2020-07-03 17:27:40  [ main:95 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} Result: [1]
2020-07-03 17:27:40  [ main:95 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} closed
2020-07-03 17:27:40  [ main:95 ] - [ DEBUG ]  {conn-10002, stmt-20001} closed
2020-07-03 17:27:40  [ main:102 ] - [ DEBUG ]  {conn-10003} connected
2020-07-03 17:27:40  [ main:102 ] - [ DEBUG ]  {conn-10003, stmt-20002} created
2020-07-03 17:27:40  [ main:103 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} query executed. 0.511 millis. SELECT 1
2020-07-03 17:27:40  [ main:103 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} open
2020-07-03 17:27:40  [ main:104 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} Header: []
2020-07-03 17:27:40  [ main:104 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} Result: [1]
2020-07-03 17:27:40  [ main:104 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} closed
2020-07-03 17:27:40  [ main:104 ] - [ DEBUG ]  {conn-10003, stmt-20002} closed
2020-07-03 17:27:40  [ main:109 ] - [ DEBUG ]  {conn-10004} connected
2020-07-03 17:27:40  [ main:109 ] - [ DEBUG ]  {conn-10004, stmt-20003} created
2020-07-03 17:27:40  [ main:110 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} query executed. 0.5539 millis. SELECT 1
2020-07-03 17:27:40  [ main:110 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} open
2020-07-03 17:27:40  [ main:110 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} Header: []
2020-07-03 17:27:40  [ main:110 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} Result: [1]
2020-07-03 17:27:40  [ main:111 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} closed
2020-07-03 17:27:40  [ main:111 ] - [ DEBUG ]  {conn-10004, stmt-20003} closed
2020-07-03 17:27:40  [ main:116 ] - [ DEBUG ]  {conn-10005} connected
2020-07-03 17:27:40  [ main:116 ] - [ DEBUG ]  {conn-10005, stmt-20004} created
2020-07-03 17:27:40  [ main:117 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} query executed. 0.5101 millis. SELECT 1
2020-07-03 17:27:40  [ main:117 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} open
2020-07-03 17:27:40  [ main:117 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} Header: []
2020-07-03 17:27:40  [ main:117 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} Result: [1]
2020-07-03 17:27:40  [ main:117 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} closed
2020-07-03 17:27:40  [ main:118 ] - [ DEBUG ]  {conn-10005, stmt-20004} closed
2020-07-03 17:27:40  [ main:120 ] - [ INFO ]  {dataSource-1} inited
2020-07-03 17:27:40  [ main:123 ] - [ DEBUG ]  {conn-10005} pool-connect
2020-07-03 17:27:40  [ main:126 ] - [ DEBUG ]  {conn-10005} setAutoCommit false
2020-07-03 17:27:40  [ main:192 ] - [ DEBUG ]  {conn-10005} setAutoCommit true
2020-07-03 17:27:40  [ main:194 ] - [ DEBUG ]  {conn-10005} pool-recycle
2020-07-03 17:27:40  [ Thread-2:209 ] - [ DEBUG ]  {conn-10001} closed
2020-07-03 17:27:40  [ Thread-2:211 ] - [ DEBUG ]  {conn-10002} closed
2020-07-03 17:27:40  [ Thread-2:211 ] - [ DEBUG ]  {conn-10003} closed
2020-07-03 17:27:40  [ Thread-2:212 ] - [ DEBUG ]  {conn-10004} closed
2020-07-03 17:27:40  [ Thread-2:212 ] - [ DEBUG ]  {conn-10005} closed
2020-07-03 17:27:40  [ Thread-2:213 ] - [ INFO ]  {dataSource-1} closed
2020-07-03 17:34:07  [ main:0 ] - [ DEBUG ]  {conn-10001} connected
2020-07-03 17:34:07  [ main:11 ] - [ DEBUG ]  {conn-10001, stmt-20000} created
2020-07-03 17:34:07  [ main:100 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} query executed. 88.8114 millis. SELECT 1
2020-07-03 17:34:07  [ main:100 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} open
2020-07-03 17:34:07  [ main:102 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} Header: []
2020-07-03 17:34:07  [ main:112 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} Result: [1]
2020-07-03 17:34:07  [ main:112 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} closed
2020-07-03 17:34:07  [ main:112 ] - [ DEBUG ]  {conn-10001, stmt-20000} closed
2020-07-03 17:34:07  [ main:119 ] - [ DEBUG ]  {conn-10002} connected
2020-07-03 17:34:07  [ main:119 ] - [ DEBUG ]  {conn-10002, stmt-20001} created
2020-07-03 17:34:07  [ main:120 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} query executed. 0.6082 millis. SELECT 1
2020-07-03 17:34:07  [ main:120 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} open
2020-07-03 17:34:07  [ main:120 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} Header: []
2020-07-03 17:34:07  [ main:121 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} Result: [1]
2020-07-03 17:34:07  [ main:121 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} closed
2020-07-03 17:34:07  [ main:121 ] - [ DEBUG ]  {conn-10002, stmt-20001} closed
2020-07-03 17:34:07  [ main:128 ] - [ DEBUG ]  {conn-10003} connected
2020-07-03 17:34:07  [ main:128 ] - [ DEBUG ]  {conn-10003, stmt-20002} created
2020-07-03 17:34:07  [ main:129 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} query executed. 0.9099 millis. SELECT 1
2020-07-03 17:34:07  [ main:130 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} open
2020-07-03 17:34:07  [ main:130 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} Header: []
2020-07-03 17:34:07  [ main:130 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} Result: [1]
2020-07-03 17:34:07  [ main:130 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} closed
2020-07-03 17:34:07  [ main:130 ] - [ DEBUG ]  {conn-10003, stmt-20002} closed
2020-07-03 17:34:07  [ main:135 ] - [ DEBUG ]  {conn-10004} connected
2020-07-03 17:34:07  [ main:135 ] - [ DEBUG ]  {conn-10004, stmt-20003} created
2020-07-03 17:34:07  [ main:136 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} query executed. 0.511 millis. SELECT 1
2020-07-03 17:34:07  [ main:136 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} open
2020-07-03 17:34:07  [ main:137 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} Header: []
2020-07-03 17:34:07  [ main:137 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} Result: [1]
2020-07-03 17:34:07  [ main:137 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} closed
2020-07-03 17:34:07  [ main:137 ] - [ DEBUG ]  {conn-10004, stmt-20003} closed
2020-07-03 17:34:07  [ main:142 ] - [ DEBUG ]  {conn-10005} connected
2020-07-03 17:34:07  [ main:143 ] - [ DEBUG ]  {conn-10005, stmt-20004} created
2020-07-03 17:34:07  [ main:143 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} query executed. 0.5021 millis. SELECT 1
2020-07-03 17:34:07  [ main:143 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} open
2020-07-03 17:34:07  [ main:144 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} Header: []
2020-07-03 17:34:07  [ main:144 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} Result: [1]
2020-07-03 17:34:07  [ main:144 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} closed
2020-07-03 17:34:07  [ main:144 ] - [ DEBUG ]  {conn-10005, stmt-20004} closed
2020-07-03 17:34:07  [ main:147 ] - [ INFO ]  {dataSource-1} inited
2020-07-03 17:34:07  [ main:150 ] - [ DEBUG ]  {conn-10005} pool-connect
2020-07-03 17:34:07  [ main:153 ] - [ DEBUG ]  {conn-10005} setAutoCommit false
2020-07-03 17:34:07  [ main:222 ] - [ DEBUG ]  {conn-10005} setAutoCommit true
2020-07-03 17:34:07  [ main:223 ] - [ DEBUG ]  {conn-10005} pool-recycle
2020-07-03 17:34:07  [ Thread-2:234 ] - [ DEBUG ]  {conn-10001} closed
2020-07-03 17:34:07  [ Thread-2:235 ] - [ DEBUG ]  {conn-10002} closed
2020-07-03 17:34:07  [ Thread-2:235 ] - [ DEBUG ]  {conn-10003} closed
2020-07-03 17:34:07  [ Thread-2:236 ] - [ DEBUG ]  {conn-10004} closed
2020-07-03 17:34:07  [ Thread-2:237 ] - [ DEBUG ]  {conn-10005} closed
2020-07-03 17:34:07  [ Thread-2:239 ] - [ INFO ]  {dataSource-1} closed
2020-07-03 17:40:48  [ main:0 ] - [ DEBUG ]  {conn-10001} connected
2020-07-03 17:40:48  [ main:9 ] - [ DEBUG ]  {conn-10001, stmt-20000} created
2020-07-03 17:40:49  [ main:79 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} query executed. 69.7038 millis. SELECT 1
2020-07-03 17:40:49  [ main:80 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} open
2020-07-03 17:40:49  [ main:81 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} Header: []
2020-07-03 17:40:49  [ main:89 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} Result: [1]
2020-07-03 17:40:49  [ main:90 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} closed
2020-07-03 17:40:49  [ main:90 ] - [ DEBUG ]  {conn-10001, stmt-20000} closed
2020-07-03 17:40:49  [ main:96 ] - [ DEBUG ]  {conn-10002} connected
2020-07-03 17:40:49  [ main:96 ] - [ DEBUG ]  {conn-10002, stmt-20001} created
2020-07-03 17:40:49  [ main:97 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} query executed. 0.6826 millis. SELECT 1
2020-07-03 17:40:49  [ main:97 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} open
2020-07-03 17:40:49  [ main:97 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} Header: []
2020-07-03 17:40:49  [ main:98 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} Result: [1]
2020-07-03 17:40:49  [ main:98 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} closed
2020-07-03 17:40:49  [ main:98 ] - [ DEBUG ]  {conn-10002, stmt-20001} closed
2020-07-03 17:40:49  [ main:105 ] - [ DEBUG ]  {conn-10003} connected
2020-07-03 17:40:49  [ main:105 ] - [ DEBUG ]  {conn-10003, stmt-20002} created
2020-07-03 17:40:49  [ main:106 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} query executed. 0.5227 millis. SELECT 1
2020-07-03 17:40:49  [ main:106 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} open
2020-07-03 17:40:49  [ main:106 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} Header: []
2020-07-03 17:40:49  [ main:106 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} Result: [1]
2020-07-03 17:40:49  [ main:107 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} closed
2020-07-03 17:40:49  [ main:107 ] - [ DEBUG ]  {conn-10003, stmt-20002} closed
2020-07-03 17:40:49  [ main:112 ] - [ DEBUG ]  {conn-10004} connected
2020-07-03 17:40:49  [ main:112 ] - [ DEBUG ]  {conn-10004, stmt-20003} created
2020-07-03 17:40:49  [ main:113 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} query executed. 0.6227 millis. SELECT 1
2020-07-03 17:40:49  [ main:113 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} open
2020-07-03 17:40:49  [ main:113 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} Header: []
2020-07-03 17:40:49  [ main:114 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} Result: [1]
2020-07-03 17:40:49  [ main:114 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} closed
2020-07-03 17:40:49  [ main:114 ] - [ DEBUG ]  {conn-10004, stmt-20003} closed
2020-07-03 17:40:49  [ main:142 ] - [ DEBUG ]  {conn-10005} connected
2020-07-03 17:40:49  [ main:142 ] - [ DEBUG ]  {conn-10005, stmt-20004} created
2020-07-03 17:40:49  [ main:143 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} query executed. 0.5552 millis. SELECT 1
2020-07-03 17:40:49  [ main:143 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} open
2020-07-03 17:40:49  [ main:143 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} Header: []
2020-07-03 17:40:49  [ main:143 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} Result: [1]
2020-07-03 17:40:49  [ main:144 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} closed
2020-07-03 17:40:49  [ main:144 ] - [ DEBUG ]  {conn-10005, stmt-20004} closed
2020-07-03 17:40:49  [ main:147 ] - [ INFO ]  {dataSource-1} inited
2020-07-03 17:40:49  [ main:150 ] - [ DEBUG ]  {conn-10005} pool-connect
2020-07-03 17:40:49  [ main:152 ] - [ DEBUG ]  {conn-10005} setAutoCommit false
2020-07-03 17:40:49  [ main:217 ] - [ DEBUG ]  {conn-10005} setAutoCommit true
2020-07-03 17:40:49  [ main:219 ] - [ DEBUG ]  {conn-10005} pool-recycle
2020-07-03 17:40:49  [ Thread-2:235 ] - [ DEBUG ]  {conn-10001} closed
2020-07-03 17:40:49  [ Thread-2:237 ] - [ DEBUG ]  {conn-10002} closed
2020-07-03 17:40:49  [ Thread-2:237 ] - [ DEBUG ]  {conn-10003} closed
2020-07-03 17:40:49  [ Thread-2:238 ] - [ DEBUG ]  {conn-10004} closed
2020-07-03 17:40:49  [ Thread-2:238 ] - [ DEBUG ]  {conn-10005} closed
2020-07-03 17:40:49  [ Thread-2:239 ] - [ INFO ]  {dataSource-1} closed
2020-07-03 17:41:41  [ main:0 ] - [ DEBUG ]  {conn-10001} connected
2020-07-03 17:41:41  [ main:6 ] - [ DEBUG ]  {conn-10001, stmt-20000} created
2020-07-03 17:41:41  [ main:81 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} query executed. 73.5593 millis. SELECT 1
2020-07-03 17:41:41  [ main:81 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} open
2020-07-03 17:41:41  [ main:83 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} Header: []
2020-07-03 17:41:41  [ main:90 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} Result: [1]
2020-07-03 17:41:41  [ main:91 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} closed
2020-07-03 17:41:41  [ main:91 ] - [ DEBUG ]  {conn-10001, stmt-20000} closed
2020-07-03 17:41:41  [ main:98 ] - [ DEBUG ]  {conn-10002} connected
2020-07-03 17:41:41  [ main:99 ] - [ DEBUG ]  {conn-10002, stmt-20001} created
2020-07-03 17:41:41  [ main:99 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} query executed. 0.683 millis. SELECT 1
2020-07-03 17:41:41  [ main:100 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} open
2020-07-03 17:41:41  [ main:100 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} Header: []
2020-07-03 17:41:41  [ main:100 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} Result: [1]
2020-07-03 17:41:41  [ main:100 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} closed
2020-07-03 17:41:41  [ main:101 ] - [ DEBUG ]  {conn-10002, stmt-20001} closed
2020-07-03 17:41:41  [ main:107 ] - [ DEBUG ]  {conn-10003} connected
2020-07-03 17:41:41  [ main:107 ] - [ DEBUG ]  {conn-10003, stmt-20002} created
2020-07-03 17:41:41  [ main:108 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} query executed. 0.536 millis. SELECT 1
2020-07-03 17:41:41  [ main:108 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} open
2020-07-03 17:41:41  [ main:109 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} Header: []
2020-07-03 17:41:41  [ main:109 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} Result: [1]
2020-07-03 17:41:41  [ main:109 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} closed
2020-07-03 17:41:41  [ main:109 ] - [ DEBUG ]  {conn-10003, stmt-20002} closed
2020-07-03 17:41:41  [ main:115 ] - [ DEBUG ]  {conn-10004} connected
2020-07-03 17:41:41  [ main:115 ] - [ DEBUG ]  {conn-10004, stmt-20003} created
2020-07-03 17:41:41  [ main:116 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} query executed. 0.5783 millis. SELECT 1
2020-07-03 17:41:41  [ main:116 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} open
2020-07-03 17:41:41  [ main:116 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} Header: []
2020-07-03 17:41:41  [ main:116 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} Result: [1]
2020-07-03 17:41:41  [ main:117 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} closed
2020-07-03 17:41:41  [ main:117 ] - [ DEBUG ]  {conn-10004, stmt-20003} closed
2020-07-03 17:41:41  [ main:123 ] - [ DEBUG ]  {conn-10005} connected
2020-07-03 17:41:41  [ main:123 ] - [ DEBUG ]  {conn-10005, stmt-20004} created
2020-07-03 17:41:41  [ main:124 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} query executed. 0.6307 millis. SELECT 1
2020-07-03 17:41:41  [ main:124 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} open
2020-07-03 17:41:41  [ main:124 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} Header: []
2020-07-03 17:41:41  [ main:125 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} Result: [1]
2020-07-03 17:41:41  [ main:125 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} closed
2020-07-03 17:41:41  [ main:125 ] - [ DEBUG ]  {conn-10005, stmt-20004} closed
2020-07-03 17:41:41  [ main:128 ] - [ INFO ]  {dataSource-1} inited
2020-07-03 17:41:41  [ main:133 ] - [ DEBUG ]  {conn-10005} pool-connect
2020-07-03 17:41:41  [ main:137 ] - [ DEBUG ]  {conn-10005} setAutoCommit false
2020-07-03 17:41:41  [ main:273 ] - [ DEBUG ]  {conn-10005} setAutoCommit true
2020-07-03 17:41:41  [ main:274 ] - [ DEBUG ]  {conn-10005} pool-recycle
2020-07-03 17:41:41  [ Thread-2:286 ] - [ DEBUG ]  {conn-10001} closed
2020-07-03 17:41:41  [ Thread-2:287 ] - [ DEBUG ]  {conn-10002} closed
2020-07-03 17:41:41  [ Thread-2:287 ] - [ DEBUG ]  {conn-10003} closed
2020-07-03 17:41:41  [ Thread-2:288 ] - [ DEBUG ]  {conn-10004} closed
2020-07-03 17:41:41  [ Thread-2:288 ] - [ DEBUG ]  {conn-10005} closed
2020-07-03 17:41:41  [ Thread-2:290 ] - [ INFO ]  {dataSource-1} closed
2020-07-03 17:42:02  [ main:0 ] - [ DEBUG ]  {conn-10001} connected
2020-07-03 17:42:02  [ main:8 ] - [ DEBUG ]  {conn-10001, stmt-20000} created
2020-07-03 17:42:02  [ main:82 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} query executed. 73.5559 millis. SELECT 1
2020-07-03 17:42:02  [ main:83 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} open
2020-07-03 17:42:02  [ main:85 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} Header: []
2020-07-03 17:42:02  [ main:92 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} Result: [1]
2020-07-03 17:42:02  [ main:92 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} closed
2020-07-03 17:42:02  [ main:93 ] - [ DEBUG ]  {conn-10001, stmt-20000} closed
2020-07-03 17:42:02  [ main:100 ] - [ DEBUG ]  {conn-10002} connected
2020-07-03 17:42:02  [ main:101 ] - [ DEBUG ]  {conn-10002, stmt-20001} created
2020-07-03 17:42:02  [ main:102 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} query executed. 0.7198 millis. SELECT 1
2020-07-03 17:42:02  [ main:102 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} open
2020-07-03 17:42:02  [ main:102 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} Header: []
2020-07-03 17:42:02  [ main:102 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} Result: [1]
2020-07-03 17:42:02  [ main:103 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} closed
2020-07-03 17:42:02  [ main:103 ] - [ DEBUG ]  {conn-10002, stmt-20001} closed
2020-07-03 17:42:02  [ main:109 ] - [ DEBUG ]  {conn-10003} connected
2020-07-03 17:42:02  [ main:110 ] - [ DEBUG ]  {conn-10003, stmt-20002} created
2020-07-03 17:42:02  [ main:110 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} query executed. 0.5498 millis. SELECT 1
2020-07-03 17:42:02  [ main:111 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} open
2020-07-03 17:42:02  [ main:111 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} Header: []
2020-07-03 17:42:02  [ main:111 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} Result: [1]
2020-07-03 17:42:02  [ main:111 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} closed
2020-07-03 17:42:02  [ main:112 ] - [ DEBUG ]  {conn-10003, stmt-20002} closed
2020-07-03 17:42:02  [ main:132 ] - [ DEBUG ]  {conn-10004} connected
2020-07-03 17:42:02  [ main:132 ] - [ DEBUG ]  {conn-10004, stmt-20003} created
2020-07-03 17:42:02  [ main:133 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} query executed. 0.6149 millis. SELECT 1
2020-07-03 17:42:02  [ main:133 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} open
2020-07-03 17:42:02  [ main:133 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} Header: []
2020-07-03 17:42:02  [ main:134 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} Result: [1]
2020-07-03 17:42:02  [ main:134 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} closed
2020-07-03 17:42:02  [ main:134 ] - [ DEBUG ]  {conn-10004, stmt-20003} closed
2020-07-03 17:42:02  [ main:140 ] - [ DEBUG ]  {conn-10005} connected
2020-07-03 17:42:02  [ main:140 ] - [ DEBUG ]  {conn-10005, stmt-20004} created
2020-07-03 17:42:02  [ main:141 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} query executed. 0.5646 millis. SELECT 1
2020-07-03 17:42:02  [ main:141 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} open
2020-07-03 17:42:02  [ main:141 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} Header: []
2020-07-03 17:42:02  [ main:142 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} Result: [1]
2020-07-03 17:42:02  [ main:142 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} closed
2020-07-03 17:42:02  [ main:142 ] - [ DEBUG ]  {conn-10005, stmt-20004} closed
2020-07-03 17:42:02  [ main:145 ] - [ INFO ]  {dataSource-1} inited
2020-07-03 17:42:02  [ main:149 ] - [ DEBUG ]  {conn-10005} pool-connect
2020-07-03 17:42:02  [ main:152 ] - [ DEBUG ]  {conn-10005} setAutoCommit false
2020-07-03 17:42:02  [ main:218 ] - [ DEBUG ]  {conn-10005} setAutoCommit true
2020-07-03 17:42:02  [ main:218 ] - [ DEBUG ]  {conn-10005} pool-recycle
2020-07-03 17:42:03  [ Thread-2:231 ] - [ DEBUG ]  {conn-10001} closed
2020-07-03 17:42:03  [ Thread-2:232 ] - [ DEBUG ]  {conn-10002} closed
2020-07-03 17:42:03  [ Thread-2:232 ] - [ DEBUG ]  {conn-10003} closed
2020-07-03 17:42:03  [ Thread-2:233 ] - [ DEBUG ]  {conn-10004} closed
2020-07-03 17:42:03  [ Thread-2:233 ] - [ DEBUG ]  {conn-10005} closed
2020-07-03 17:42:03  [ Thread-2:234 ] - [ INFO ]  {dataSource-1} closed
2020-07-03 17:44:56  [ main:0 ] - [ DEBUG ]  {conn-10001} connected
2020-07-03 17:44:56  [ main:8 ] - [ DEBUG ]  {conn-10001, stmt-20000} created
2020-07-03 17:44:56  [ main:77 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} query executed. 68.2764 millis. SELECT 1
2020-07-03 17:44:56  [ main:78 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} open
2020-07-03 17:44:56  [ main:80 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} Header: []
2020-07-03 17:44:56  [ main:87 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} Result: [1]
2020-07-03 17:44:56  [ main:88 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} closed
2020-07-03 17:44:56  [ main:88 ] - [ DEBUG ]  {conn-10001, stmt-20000} closed
2020-07-03 17:44:56  [ main:110 ] - [ DEBUG ]  {conn-10002} connected
2020-07-03 17:44:56  [ main:110 ] - [ DEBUG ]  {conn-10002, stmt-20001} created
2020-07-03 17:44:56  [ main:111 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} query executed. 0.5474 millis. SELECT 1
2020-07-03 17:44:56  [ main:111 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} open
2020-07-03 17:44:56  [ main:111 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} Header: []
2020-07-03 17:44:56  [ main:112 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} Result: [1]
2020-07-03 17:44:56  [ main:112 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} closed
2020-07-03 17:44:56  [ main:112 ] - [ DEBUG ]  {conn-10002, stmt-20001} closed
2020-07-03 17:44:56  [ main:118 ] - [ DEBUG ]  {conn-10003} connected
2020-07-03 17:44:56  [ main:118 ] - [ DEBUG ]  {conn-10003, stmt-20002} created
2020-07-03 17:44:56  [ main:119 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} query executed. 1.1453 millis. SELECT 1
2020-07-03 17:44:56  [ main:120 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} open
2020-07-03 17:44:56  [ main:120 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} Header: []
2020-07-03 17:44:56  [ main:120 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} Result: [1]
2020-07-03 17:44:56  [ main:120 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} closed
2020-07-03 17:44:56  [ main:120 ] - [ DEBUG ]  {conn-10003, stmt-20002} closed
2020-07-03 17:44:56  [ main:125 ] - [ DEBUG ]  {conn-10004} connected
2020-07-03 17:44:56  [ main:125 ] - [ DEBUG ]  {conn-10004, stmt-20003} created
2020-07-03 17:44:56  [ main:126 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} query executed. 0.438 millis. SELECT 1
2020-07-03 17:44:56  [ main:126 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} open
2020-07-03 17:44:56  [ main:126 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} Header: []
2020-07-03 17:44:56  [ main:126 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} Result: [1]
2020-07-03 17:44:56  [ main:127 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} closed
2020-07-03 17:44:56  [ main:127 ] - [ DEBUG ]  {conn-10004, stmt-20003} closed
2020-07-03 17:44:56  [ main:131 ] - [ DEBUG ]  {conn-10005} connected
2020-07-03 17:44:56  [ main:132 ] - [ DEBUG ]  {conn-10005, stmt-20004} created
2020-07-03 17:44:56  [ main:133 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} query executed. 0.7402 millis. SELECT 1
2020-07-03 17:44:56  [ main:133 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} open
2020-07-03 17:44:56  [ main:133 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} Header: []
2020-07-03 17:44:56  [ main:133 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} Result: [1]
2020-07-03 17:44:56  [ main:134 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} closed
2020-07-03 17:44:56  [ main:134 ] - [ DEBUG ]  {conn-10005, stmt-20004} closed
2020-07-03 17:44:56  [ main:137 ] - [ INFO ]  {dataSource-1} inited
2020-07-03 17:44:56  [ main:139 ] - [ DEBUG ]  {conn-10005} pool-connect
2020-07-03 17:44:56  [ main:142 ] - [ DEBUG ]  {conn-10005} setAutoCommit false
2020-07-03 17:44:57  [ main:330 ] - [ DEBUG ]  {conn-10005, pstmt-20005} created. select * from UserInfo where UserId=?
2020-07-03 17:44:57  [ main:335 ] - [ DEBUG ]  {conn-10005, pstmt-20005} Parameters : [12]
2020-07-03 17:44:57  [ main:336 ] - [ DEBUG ]  {conn-10005, pstmt-20005} Types : [VARCHAR]
2020-07-03 17:44:57  [ main:405 ] - [ DEBUG ]  {conn-10005, pstmt-20005} executed. 70.4219 millis. select * from UserInfo where UserId=?
2020-07-03 17:44:57  [ main:406 ] - [ DEBUG ]  {conn-10005, pstmt-20005, rs-50005} open
2020-07-03 17:44:57  [ main:406 ] - [ DEBUG ]  {conn-10005, pstmt-20005, rs-50005} Header: [UserId, UserNumber, UserPwd, UserSex, UserName, UserPart, UserType, UserBirthday, UserAddress, UserSignDate, UserHeadImg, UserLike, UserStr, StrString, IntInteger]
2020-07-03 17:44:57  [ main:410 ] - [ DEBUG ]  {conn-10005, pstmt-20005, rs-50005} Result: [12, 123456, null, null, null, null, null, null, null, null, null, null, null, null, null]
2020-07-03 17:44:57  [ main:411 ] - [ DEBUG ]  {conn-10005, pstmt-20005, rs-50005} closed
2020-07-03 17:44:57  [ main:417 ] - [ DEBUG ]  {conn-10005, pstmt-20005} clearParameters. 
2020-07-03 17:44:57  [ main:417 ] - [ DEBUG ]  {conn-10005, pstmt-20005} enter cache
2020-07-03 17:44:57  [ main:420 ] - [ DEBUG ]  {conn 10005} rollback
2020-07-03 17:44:57  [ main:421 ] - [ DEBUG ]  {conn-10005} setAutoCommit true
2020-07-03 17:44:57  [ main:422 ] - [ DEBUG ]  {conn-10005} pool-recycle
2020-07-03 17:44:57  [ Thread-2:428 ] - [ DEBUG ]  {conn-10001} closed
2020-07-03 17:44:57  [ Thread-2:430 ] - [ DEBUG ]  {conn-10002} closed
2020-07-03 17:44:57  [ Thread-2:430 ] - [ DEBUG ]  {conn-10003} closed
2020-07-03 17:44:57  [ Thread-2:431 ] - [ DEBUG ]  {conn-10004} closed
2020-07-03 17:44:57  [ Thread-2:431 ] - [ DEBUG ]  {conn-10005, pstmt-20005} exit cache
2020-07-03 17:44:57  [ Thread-2:431 ] - [ DEBUG ]  {conn-10005, pstmt-20005} closed
2020-07-03 17:44:57  [ Thread-2:432 ] - [ DEBUG ]  {conn-10005} closed
2020-07-03 17:44:57  [ Thread-2:433 ] - [ INFO ]  {dataSource-1} closed
2020-07-03 17:45:24  [ main:0 ] - [ DEBUG ]  {conn-10001} connected
2020-07-03 17:45:24  [ main:12 ] - [ DEBUG ]  {conn-10001, stmt-20000} created
2020-07-03 17:45:24  [ main:87 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} query executed. 74.5292 millis. SELECT 1
2020-07-03 17:45:24  [ main:87 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} open
2020-07-03 17:45:24  [ main:90 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} Header: []
2020-07-03 17:45:24  [ main:98 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} Result: [1]
2020-07-03 17:45:24  [ main:98 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} closed
2020-07-03 17:45:24  [ main:98 ] - [ DEBUG ]  {conn-10001, stmt-20000} closed
2020-07-03 17:45:24  [ main:105 ] - [ DEBUG ]  {conn-10002} connected
2020-07-03 17:45:24  [ main:105 ] - [ DEBUG ]  {conn-10002, stmt-20001} created
2020-07-03 17:45:24  [ main:106 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} query executed. 0.6261 millis. SELECT 1
2020-07-03 17:45:24  [ main:106 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} open
2020-07-03 17:45:24  [ main:106 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} Header: []
2020-07-03 17:45:24  [ main:107 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} Result: [1]
2020-07-03 17:45:24  [ main:107 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} closed
2020-07-03 17:45:24  [ main:107 ] - [ DEBUG ]  {conn-10002, stmt-20001} closed
2020-07-03 17:45:24  [ main:113 ] - [ DEBUG ]  {conn-10003} connected
2020-07-03 17:45:24  [ main:114 ] - [ DEBUG ]  {conn-10003, stmt-20002} created
2020-07-03 17:45:24  [ main:115 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} query executed. 0.5298 millis. SELECT 1
2020-07-03 17:45:24  [ main:115 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} open
2020-07-03 17:45:24  [ main:115 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} Header: []
2020-07-03 17:45:24  [ main:115 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} Result: [1]
2020-07-03 17:45:24  [ main:115 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} closed
2020-07-03 17:45:24  [ main:115 ] - [ DEBUG ]  {conn-10003, stmt-20002} closed
2020-07-03 17:45:24  [ main:120 ] - [ DEBUG ]  {conn-10004} connected
2020-07-03 17:45:24  [ main:121 ] - [ DEBUG ]  {conn-10004, stmt-20003} created
2020-07-03 17:45:24  [ main:121 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} query executed. 0.5178 millis. SELECT 1
2020-07-03 17:45:24  [ main:122 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} open
2020-07-03 17:45:24  [ main:122 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} Header: []
2020-07-03 17:45:24  [ main:122 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} Result: [1]
2020-07-03 17:45:24  [ main:122 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} closed
2020-07-03 17:45:24  [ main:122 ] - [ DEBUG ]  {conn-10004, stmt-20003} closed
2020-07-03 17:45:24  [ main:128 ] - [ DEBUG ]  {conn-10005} connected
2020-07-03 17:45:24  [ main:128 ] - [ DEBUG ]  {conn-10005, stmt-20004} created
2020-07-03 17:45:24  [ main:129 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} query executed. 0.9426 millis. SELECT 1
2020-07-03 17:45:24  [ main:129 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} open
2020-07-03 17:45:24  [ main:130 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} Header: []
2020-07-03 17:45:24  [ main:130 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} Result: [1]
2020-07-03 17:45:24  [ main:130 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} closed
2020-07-03 17:45:24  [ main:130 ] - [ DEBUG ]  {conn-10005, stmt-20004} closed
2020-07-03 17:45:24  [ main:133 ] - [ INFO ]  {dataSource-1} inited
2020-07-03 17:45:24  [ main:137 ] - [ DEBUG ]  {conn-10005} pool-connect
2020-07-03 17:45:24  [ main:140 ] - [ DEBUG ]  {conn-10005} setAutoCommit false
2020-07-03 17:45:32  [ main:7851 ] - [ DEBUG ]  {conn-10005, pstmt-20005} created. select * from UserInfo where UserId=?
2020-07-03 17:45:32  [ main:7860 ] - [ DEBUG ]  {conn-10005, pstmt-20005} Parameters : [12]
2020-07-03 17:45:32  [ main:7860 ] - [ DEBUG ]  {conn-10005, pstmt-20005} Types : [VARCHAR]
2020-07-03 17:45:32  [ main:7863 ] - [ DEBUG ]  {conn-10005, pstmt-20005} executed. 3.1987 millis. select * from UserInfo where UserId=?
2020-07-03 17:45:32  [ main:7863 ] - [ DEBUG ]  {conn-10005, pstmt-20005, rs-50005} open
2020-07-03 17:45:32  [ main:7864 ] - [ DEBUG ]  {conn-10005, pstmt-20005, rs-50005} Header: [UserId, UserNumber, UserPwd, UserSex, UserName, UserPart, UserType, UserBirthday, UserAddress, UserSignDate, UserHeadImg, UserLike, UserStr, StrString, IntInteger]
2020-07-03 17:45:32  [ main:7868 ] - [ DEBUG ]  {conn-10005, pstmt-20005, rs-50005} Result: [12, 123456, null, null, null, null, null, null, null, null, null, null, null, null, null]
2020-07-03 17:45:32  [ main:7869 ] - [ DEBUG ]  {conn-10005, pstmt-20005, rs-50005} closed
2020-07-03 17:45:32  [ main:7876 ] - [ DEBUG ]  {conn-10005, pstmt-20005} clearParameters. 
2020-07-03 17:45:32  [ main:7876 ] - [ DEBUG ]  {conn-10005, pstmt-20005} enter cache
2020-07-03 17:45:32  [ main:7880 ] - [ DEBUG ]  {conn 10005} rollback
2020-07-03 17:45:32  [ main:7881 ] - [ DEBUG ]  {conn-10005} setAutoCommit true
2020-07-03 17:45:32  [ main:7882 ] - [ DEBUG ]  {conn-10005} pool-recycle
2020-07-03 17:45:32  [ Thread-2:7890 ] - [ DEBUG ]  {conn-10001} closed
2020-07-03 17:45:32  [ Thread-2:7892 ] - [ DEBUG ]  {conn-10002} closed
2020-07-03 17:45:32  [ Thread-2:7893 ] - [ DEBUG ]  {conn-10003} closed
2020-07-03 17:45:32  [ Thread-2:7894 ] - [ DEBUG ]  {conn-10004} closed
2020-07-03 17:45:32  [ Thread-2:7894 ] - [ DEBUG ]  {conn-10005, pstmt-20005} exit cache
2020-07-03 17:45:32  [ Thread-2:7894 ] - [ DEBUG ]  {conn-10005, pstmt-20005} closed
2020-07-03 17:45:32  [ Thread-2:7895 ] - [ DEBUG ]  {conn-10005} closed
2020-07-03 17:45:32  [ Thread-2:7897 ] - [ INFO ]  {dataSource-1} closed
2020-07-03 17:46:02  [ main:0 ] - [ DEBUG ]  {conn-10001} connected
2020-07-03 17:46:02  [ main:11 ] - [ DEBUG ]  {conn-10001, stmt-20000} created
2020-07-03 17:46:02  [ main:92 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} query executed. 80.4627 millis. SELECT 1
2020-07-03 17:46:02  [ main:93 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} open
2020-07-03 17:46:02  [ main:95 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} Header: []
2020-07-03 17:46:02  [ main:102 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} Result: [1]
2020-07-03 17:46:02  [ main:103 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} closed
2020-07-03 17:46:02  [ main:103 ] - [ DEBUG ]  {conn-10001, stmt-20000} closed
2020-07-03 17:46:02  [ main:110 ] - [ DEBUG ]  {conn-10002} connected
2020-07-03 17:46:02  [ main:110 ] - [ DEBUG ]  {conn-10002, stmt-20001} created
2020-07-03 17:46:02  [ main:111 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} query executed. 0.6166 millis. SELECT 1
2020-07-03 17:46:02  [ main:111 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} open
2020-07-03 17:46:02  [ main:111 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} Header: []
2020-07-03 17:46:02  [ main:112 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} Result: [1]
2020-07-03 17:46:02  [ main:112 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} closed
2020-07-03 17:46:02  [ main:112 ] - [ DEBUG ]  {conn-10002, stmt-20001} closed
2020-07-03 17:46:02  [ main:118 ] - [ DEBUG ]  {conn-10003} connected
2020-07-03 17:46:02  [ main:119 ] - [ DEBUG ]  {conn-10003, stmt-20002} created
2020-07-03 17:46:02  [ main:119 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} query executed. 0.4776 millis. SELECT 1
2020-07-03 17:46:02  [ main:120 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} open
2020-07-03 17:46:02  [ main:120 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} Header: []
2020-07-03 17:46:02  [ main:120 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} Result: [1]
2020-07-03 17:46:02  [ main:120 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} closed
2020-07-03 17:46:02  [ main:120 ] - [ DEBUG ]  {conn-10003, stmt-20002} closed
2020-07-03 17:46:02  [ main:126 ] - [ DEBUG ]  {conn-10004} connected
2020-07-03 17:46:02  [ main:126 ] - [ DEBUG ]  {conn-10004, stmt-20003} created
2020-07-03 17:46:02  [ main:127 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} query executed. 0.4831 millis. SELECT 1
2020-07-03 17:46:02  [ main:127 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} open
2020-07-03 17:46:02  [ main:127 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} Header: []
2020-07-03 17:46:02  [ main:127 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} Result: [1]
2020-07-03 17:46:02  [ main:127 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} closed
2020-07-03 17:46:02  [ main:127 ] - [ DEBUG ]  {conn-10004, stmt-20003} closed
2020-07-03 17:46:02  [ main:131 ] - [ DEBUG ]  {conn-10005} connected
2020-07-03 17:46:02  [ main:132 ] - [ DEBUG ]  {conn-10005, stmt-20004} created
2020-07-03 17:46:02  [ main:132 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} query executed. 0.4878 millis. SELECT 1
2020-07-03 17:46:02  [ main:133 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} open
2020-07-03 17:46:02  [ main:133 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} Header: []
2020-07-03 17:46:02  [ main:133 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} Result: [1]
2020-07-03 17:46:02  [ main:133 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} closed
2020-07-03 17:46:02  [ main:133 ] - [ DEBUG ]  {conn-10005, stmt-20004} closed
2020-07-03 17:46:02  [ main:137 ] - [ INFO ]  {dataSource-1} inited
2020-07-03 17:46:02  [ main:140 ] - [ DEBUG ]  {conn-10005} pool-connect
2020-07-03 17:46:02  [ main:143 ] - [ DEBUG ]  {conn-10005} setAutoCommit false
2020-07-03 17:46:11  [ main:8616 ] - [ DEBUG ]  {conn-10005, pstmt-20005} created. select * from UserInfo where UserId=?
2020-07-03 17:46:11  [ main:8622 ] - [ DEBUG ]  {conn-10005, pstmt-20005} Parameters : [12]
2020-07-03 17:46:11  [ main:8622 ] - [ DEBUG ]  {conn-10005, pstmt-20005} Types : [VARCHAR]
2020-07-03 17:46:11  [ main:8625 ] - [ DEBUG ]  {conn-10005, pstmt-20005} executed. 3.2068 millis. select * from UserInfo where UserId=?
2020-07-03 17:46:11  [ main:8625 ] - [ DEBUG ]  {conn-10005, pstmt-20005, rs-50005} open
2020-07-03 17:46:11  [ main:8626 ] - [ DEBUG ]  {conn-10005, pstmt-20005, rs-50005} Header: [UserId, UserNumber, UserPwd, UserSex, UserName, UserPart, UserType, UserBirthday, UserAddress, UserSignDate, UserHeadImg, UserLike, UserStr, StrString, IntInteger]
2020-07-03 17:46:11  [ main:8630 ] - [ DEBUG ]  {conn-10005, pstmt-20005, rs-50005} Result: [12, 123456, null, null, null, null, null, null, null, null, null, null, null, null, null]
2020-07-03 17:46:11  [ main:8631 ] - [ DEBUG ]  {conn-10005, pstmt-20005, rs-50005} closed
2020-07-03 17:46:11  [ main:8636 ] - [ DEBUG ]  {conn-10005, pstmt-20005} clearParameters. 
2020-07-03 17:46:11  [ main:8636 ] - [ DEBUG ]  {conn-10005, pstmt-20005} enter cache
2020-07-03 17:47:04  [ main:61832 ] - [ DEBUG ]  {conn 10005} rollback
2020-07-03 17:47:04  [ main:61833 ] - [ DEBUG ]  {conn-10005} setAutoCommit true
2020-07-03 17:47:04  [ main:61834 ] - [ DEBUG ]  {conn-10005} pool-recycle
2020-07-03 17:47:12  [ main:0 ] - [ DEBUG ]  {conn-10001} connected
2020-07-03 17:47:12  [ main:10 ] - [ DEBUG ]  {conn-10001, stmt-20000} created
2020-07-03 17:47:12  [ main:83 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} query executed. 71.4519 millis. SELECT 1
2020-07-03 17:47:12  [ main:83 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} open
2020-07-03 17:47:12  [ main:85 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} Header: []
2020-07-03 17:47:12  [ main:93 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} Result: [1]
2020-07-03 17:47:12  [ main:93 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} closed
2020-07-03 17:47:12  [ main:94 ] - [ DEBUG ]  {conn-10001, stmt-20000} closed
2020-07-03 17:47:12  [ main:100 ] - [ DEBUG ]  {conn-10002} connected
2020-07-03 17:47:12  [ main:100 ] - [ DEBUG ]  {conn-10002, stmt-20001} created
2020-07-03 17:47:12  [ main:101 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} query executed. 0.6178 millis. SELECT 1
2020-07-03 17:47:12  [ main:101 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} open
2020-07-03 17:47:12  [ main:101 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} Header: []
2020-07-03 17:47:12  [ main:101 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} Result: [1]
2020-07-03 17:47:12  [ main:102 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} closed
2020-07-03 17:47:12  [ main:102 ] - [ DEBUG ]  {conn-10002, stmt-20001} closed
2020-07-03 17:47:12  [ main:107 ] - [ DEBUG ]  {conn-10003} connected
2020-07-03 17:47:12  [ main:108 ] - [ DEBUG ]  {conn-10003, stmt-20002} created
2020-07-03 17:47:12  [ main:108 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} query executed. 0.5543 millis. SELECT 1
2020-07-03 17:47:12  [ main:109 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} open
2020-07-03 17:47:12  [ main:109 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} Header: []
2020-07-03 17:47:12  [ main:109 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} Result: [1]
2020-07-03 17:47:12  [ main:109 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} closed
2020-07-03 17:47:12  [ main:110 ] - [ DEBUG ]  {conn-10003, stmt-20002} closed
2020-07-03 17:47:12  [ main:114 ] - [ DEBUG ]  {conn-10004} connected
2020-07-03 17:47:12  [ main:115 ] - [ DEBUG ]  {conn-10004, stmt-20003} created
2020-07-03 17:47:12  [ main:115 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} query executed. 0.4542 millis. SELECT 1
2020-07-03 17:47:12  [ main:115 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} open
2020-07-03 17:47:12  [ main:116 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} Header: []
2020-07-03 17:47:12  [ main:116 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} Result: [1]
2020-07-03 17:47:12  [ main:116 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} closed
2020-07-03 17:47:12  [ main:116 ] - [ DEBUG ]  {conn-10004, stmt-20003} closed
2020-07-03 17:47:12  [ main:121 ] - [ DEBUG ]  {conn-10005} connected
2020-07-03 17:47:12  [ main:121 ] - [ DEBUG ]  {conn-10005, stmt-20004} created
2020-07-03 17:47:12  [ main:122 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} query executed. 0.4661 millis. SELECT 1
2020-07-03 17:47:12  [ main:122 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} open
2020-07-03 17:47:12  [ main:122 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} Header: []
2020-07-03 17:47:12  [ main:123 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} Result: [1]
2020-07-03 17:47:12  [ main:123 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} closed
2020-07-03 17:47:12  [ main:123 ] - [ DEBUG ]  {conn-10005, stmt-20004} closed
2020-07-03 17:47:12  [ main:126 ] - [ INFO ]  {dataSource-1} inited
2020-07-03 17:47:12  [ main:130 ] - [ DEBUG ]  {conn-10005} pool-connect
2020-07-03 17:47:12  [ main:133 ] - [ DEBUG ]  {conn-10005} setAutoCommit false
2020-07-03 17:47:12  [ main:254 ] - [ DEBUG ]  {conn-10005, pstmt-20005} created. select * from UserInfo where UserId=?
2020-07-03 17:47:12  [ main:260 ] - [ DEBUG ]  {conn-10005, pstmt-20005} Parameters : [12]
2020-07-03 17:47:12  [ main:260 ] - [ DEBUG ]  {conn-10005, pstmt-20005} Types : [VARCHAR]
2020-07-03 17:47:12  [ main:263 ] - [ DEBUG ]  {conn-10005, pstmt-20005} executed. 3.3583 millis. select * from UserInfo where UserId=?
2020-07-03 17:47:12  [ main:263 ] - [ DEBUG ]  {conn-10005, pstmt-20005, rs-50005} open
2020-07-03 17:47:12  [ main:264 ] - [ DEBUG ]  {conn-10005, pstmt-20005, rs-50005} Header: [UserId, UserNumber, UserPwd, UserSex, UserName, UserPart, UserType, UserBirthday, UserAddress, UserSignDate, UserHeadImg, UserLike, UserStr, StrString, IntInteger]
2020-07-03 17:47:12  [ main:268 ] - [ DEBUG ]  {conn-10005, pstmt-20005, rs-50005} Result: [12, 123456, null, null, null, null, null, null, null, null, null, null, null, null, null]
2020-07-03 17:47:12  [ main:269 ] - [ DEBUG ]  {conn-10005, pstmt-20005, rs-50005} closed
2020-07-03 17:47:12  [ main:274 ] - [ DEBUG ]  {conn-10005, pstmt-20005} clearParameters. 
2020-07-03 17:47:12  [ main:274 ] - [ DEBUG ]  {conn-10005, pstmt-20005} enter cache
2020-07-03 17:47:12  [ main:279 ] - [ DEBUG ]  {conn 10005} rollback
2020-07-03 17:47:12  [ main:279 ] - [ DEBUG ]  {conn-10005} setAutoCommit true
2020-07-03 17:47:12  [ main:280 ] - [ DEBUG ]  {conn-10005} pool-recycle
2020-07-03 17:47:12  [ Thread-2:286 ] - [ DEBUG ]  {conn-10001} closed
2020-07-03 17:47:12  [ Thread-2:287 ] - [ DEBUG ]  {conn-10002} closed
2020-07-03 17:47:12  [ Thread-2:288 ] - [ DEBUG ]  {conn-10003} closed
2020-07-03 17:47:12  [ Thread-2:288 ] - [ DEBUG ]  {conn-10004} closed
2020-07-03 17:47:12  [ Thread-2:289 ] - [ DEBUG ]  {conn-10005, pstmt-20005} exit cache
2020-07-03 17:47:12  [ Thread-2:289 ] - [ DEBUG ]  {conn-10005, pstmt-20005} closed
2020-07-03 17:47:12  [ Thread-2:289 ] - [ DEBUG ]  {conn-10005} closed
2020-07-03 17:47:12  [ Thread-2:291 ] - [ INFO ]  {dataSource-1} closed
2020-07-03 17:47:21  [ main:0 ] - [ DEBUG ]  {conn-10001} connected
2020-07-03 17:47:21  [ main:8 ] - [ DEBUG ]  {conn-10001, stmt-20000} created
2020-07-03 17:47:21  [ main:174 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} query executed. 164.9408 millis. SELECT 1
2020-07-03 17:47:21  [ main:174 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} open
2020-07-03 17:47:21  [ main:176 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} Header: []
2020-07-03 17:47:21  [ main:185 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} Result: [1]
2020-07-03 17:47:21  [ main:186 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} closed
2020-07-03 17:47:21  [ main:186 ] - [ DEBUG ]  {conn-10001, stmt-20000} closed
2020-07-03 17:47:21  [ main:195 ] - [ DEBUG ]  {conn-10002} connected
2020-07-03 17:47:21  [ main:195 ] - [ DEBUG ]  {conn-10002, stmt-20001} created
2020-07-03 17:47:21  [ main:196 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} query executed. 0.7196 millis. SELECT 1
2020-07-03 17:47:21  [ main:196 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} open
2020-07-03 17:47:21  [ main:196 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} Header: []
2020-07-03 17:47:21  [ main:197 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} Result: [1]
2020-07-03 17:47:21  [ main:197 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} closed
2020-07-03 17:47:21  [ main:197 ] - [ DEBUG ]  {conn-10002, stmt-20001} closed
2020-07-03 17:47:21  [ main:205 ] - [ DEBUG ]  {conn-10003} connected
2020-07-03 17:47:21  [ main:206 ] - [ DEBUG ]  {conn-10003, stmt-20002} created
2020-07-03 17:47:21  [ main:207 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} query executed. 0.6937 millis. SELECT 1
2020-07-03 17:47:21  [ main:207 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} open
2020-07-03 17:47:21  [ main:207 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} Header: []
2020-07-03 17:47:21  [ main:207 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} Result: [1]
2020-07-03 17:47:21  [ main:208 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} closed
2020-07-03 17:47:21  [ main:208 ] - [ DEBUG ]  {conn-10003, stmt-20002} closed
2020-07-03 17:47:21  [ main:215 ] - [ DEBUG ]  {conn-10004} connected
2020-07-03 17:47:21  [ main:215 ] - [ DEBUG ]  {conn-10004, stmt-20003} created
2020-07-03 17:47:21  [ main:216 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} query executed. 0.9644 millis. SELECT 1
2020-07-03 17:47:21  [ main:217 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} open
2020-07-03 17:47:21  [ main:217 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} Header: []
2020-07-03 17:47:21  [ main:217 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} Result: [1]
2020-07-03 17:47:21  [ main:217 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} closed
2020-07-03 17:47:21  [ main:218 ] - [ DEBUG ]  {conn-10004, stmt-20003} closed
2020-07-03 17:47:21  [ main:224 ] - [ DEBUG ]  {conn-10005} connected
2020-07-03 17:47:21  [ main:224 ] - [ DEBUG ]  {conn-10005, stmt-20004} created
2020-07-03 17:47:21  [ main:226 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} query executed. 0.8229 millis. SELECT 1
2020-07-03 17:47:21  [ main:226 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} open
2020-07-03 17:47:21  [ main:226 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} Header: []
2020-07-03 17:47:21  [ main:226 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} Result: [1]
2020-07-03 17:47:21  [ main:226 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} closed
2020-07-03 17:47:21  [ main:227 ] - [ DEBUG ]  {conn-10005, stmt-20004} closed
2020-07-03 17:47:21  [ main:230 ] - [ INFO ]  {dataSource-1} inited
2020-07-03 17:47:21  [ main:234 ] - [ DEBUG ]  {conn-10005} pool-connect
2020-07-03 17:47:21  [ main:238 ] - [ DEBUG ]  {conn-10005} setAutoCommit false
2020-07-03 17:47:28  [ main:7105 ] - [ DEBUG ]  {conn-10005, pstmt-20005} created. select * from UserInfo where UserId=?
2020-07-03 17:47:28  [ main:7110 ] - [ DEBUG ]  {conn-10005, pstmt-20005} Parameters : [12]
2020-07-03 17:47:28  [ main:7111 ] - [ DEBUG ]  {conn-10005, pstmt-20005} Types : [VARCHAR]
2020-07-03 17:47:28  [ main:7113 ] - [ DEBUG ]  {conn-10005, pstmt-20005} executed. 2.9225 millis. select * from UserInfo where UserId=?
2020-07-03 17:47:28  [ main:7114 ] - [ DEBUG ]  {conn-10005, pstmt-20005, rs-50005} open
2020-07-03 17:47:28  [ main:7114 ] - [ DEBUG ]  {conn-10005, pstmt-20005, rs-50005} Header: [UserId, UserNumber, UserPwd, UserSex, UserName, UserPart, UserType, UserBirthday, UserAddress, UserSignDate, UserHeadImg, UserLike, UserStr, StrString, IntInteger]
2020-07-03 17:47:28  [ main:7119 ] - [ DEBUG ]  {conn-10005, pstmt-20005, rs-50005} Result: [12, 123456, null, null, null, null, null, null, null, null, null, null, null, null, null]
2020-07-03 17:47:28  [ main:7120 ] - [ DEBUG ]  {conn-10005, pstmt-20005, rs-50005} closed
2020-07-03 17:47:28  [ main:7125 ] - [ DEBUG ]  {conn-10005, pstmt-20005} clearParameters. 
2020-07-03 17:47:28  [ main:7125 ] - [ DEBUG ]  {conn-10005, pstmt-20005} enter cache
2020-07-03 17:51:15  [ main:233813 ] - [ DEBUG ]  {conn 10005} rollback
2020-07-03 17:51:15  [ main:233813 ] - [ DEBUG ]  {conn-10005} setAutoCommit true
2020-07-03 17:51:15  [ main:233814 ] - [ DEBUG ]  {conn-10005} pool-recycle
2020-07-03 17:51:28  [ main:0 ] - [ DEBUG ]  {conn-10001} connected
2020-07-03 17:51:28  [ main:9 ] - [ DEBUG ]  {conn-10001, stmt-20000} created
2020-07-03 17:51:28  [ main:88 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} query executed. 77.4591 millis. SELECT 1
2020-07-03 17:51:28  [ main:88 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} open
2020-07-03 17:51:28  [ main:90 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} Header: []
2020-07-03 17:51:28  [ main:98 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} Result: [1]
2020-07-03 17:51:28  [ main:98 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} closed
2020-07-03 17:51:28  [ main:98 ] - [ DEBUG ]  {conn-10001, stmt-20000} closed
2020-07-03 17:51:28  [ main:105 ] - [ DEBUG ]  {conn-10002} connected
2020-07-03 17:51:28  [ main:105 ] - [ DEBUG ]  {conn-10002, stmt-20001} created
2020-07-03 17:51:28  [ main:106 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} query executed. 0.5946 millis. SELECT 1
2020-07-03 17:51:28  [ main:106 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} open
2020-07-03 17:51:28  [ main:106 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} Header: []
2020-07-03 17:51:28  [ main:106 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} Result: [1]
2020-07-03 17:51:28  [ main:107 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} closed
2020-07-03 17:51:28  [ main:107 ] - [ DEBUG ]  {conn-10002, stmt-20001} closed
2020-07-03 17:51:28  [ main:113 ] - [ DEBUG ]  {conn-10003} connected
2020-07-03 17:51:28  [ main:114 ] - [ DEBUG ]  {conn-10003, stmt-20002} created
2020-07-03 17:51:28  [ main:114 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} query executed. 0.5056 millis. SELECT 1
2020-07-03 17:51:28  [ main:115 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} open
2020-07-03 17:51:28  [ main:115 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} Header: []
2020-07-03 17:51:28  [ main:115 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} Result: [1]
2020-07-03 17:51:28  [ main:115 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} closed
2020-07-03 17:51:28  [ main:115 ] - [ DEBUG ]  {conn-10003, stmt-20002} closed
2020-07-03 17:51:28  [ main:122 ] - [ DEBUG ]  {conn-10004} connected
2020-07-03 17:51:28  [ main:122 ] - [ DEBUG ]  {conn-10004, stmt-20003} created
2020-07-03 17:51:28  [ main:123 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} query executed. 0.5762 millis. SELECT 1
2020-07-03 17:51:28  [ main:123 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} open
2020-07-03 17:51:28  [ main:123 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} Header: []
2020-07-03 17:51:28  [ main:123 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} Result: [1]
2020-07-03 17:51:28  [ main:124 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} closed
2020-07-03 17:51:28  [ main:124 ] - [ DEBUG ]  {conn-10004, stmt-20003} closed
2020-07-03 17:51:28  [ main:129 ] - [ DEBUG ]  {conn-10005} connected
2020-07-03 17:51:28  [ main:129 ] - [ DEBUG ]  {conn-10005, stmt-20004} created
2020-07-03 17:51:28  [ main:130 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} query executed. 0.5953 millis. SELECT 1
2020-07-03 17:51:28  [ main:131 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} open
2020-07-03 17:51:28  [ main:131 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} Header: []
2020-07-03 17:51:28  [ main:131 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} Result: [1]
2020-07-03 17:51:28  [ main:131 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} closed
2020-07-03 17:51:28  [ main:131 ] - [ DEBUG ]  {conn-10005, stmt-20004} closed
2020-07-03 17:51:28  [ main:135 ] - [ INFO ]  {dataSource-1} inited
2020-07-03 17:51:28  [ main:139 ] - [ DEBUG ]  {conn-10005} pool-connect
2020-07-03 17:51:28  [ main:141 ] - [ DEBUG ]  {conn-10005} setAutoCommit false
2020-07-03 17:51:31  [ main:2900 ] - [ DEBUG ]  {conn-10005, pstmt-20005} created. select * from UserInfo where UserId=?
2020-07-03 17:51:31  [ main:2906 ] - [ DEBUG ]  {conn-10005, pstmt-20005} Parameters : [12]
2020-07-03 17:51:31  [ main:2907 ] - [ DEBUG ]  {conn-10005, pstmt-20005} Types : [VARCHAR]
2020-07-03 17:51:31  [ main:2909 ] - [ DEBUG ]  {conn-10005, pstmt-20005} executed. 2.8459 millis. select * from UserInfo where UserId=?
2020-07-03 17:51:31  [ main:2910 ] - [ DEBUG ]  {conn-10005, pstmt-20005, rs-50005} open
2020-07-03 17:51:31  [ main:2910 ] - [ DEBUG ]  {conn-10005, pstmt-20005, rs-50005} Header: [UserId, UserNumber, UserPwd, UserSex, UserName, UserPart, UserType, UserBirthday, UserAddress, UserSignDate, UserHeadImg, UserLike, UserStr, StrString, IntInteger]
2020-07-03 17:51:31  [ main:2914 ] - [ DEBUG ]  {conn-10005, pstmt-20005, rs-50005} Result: [12, 123456, dsdsds, true, hao, 用户, vip, 201203, 火星, null, null, null, null, null, null]
2020-07-03 17:51:31  [ main:2915 ] - [ DEBUG ]  {conn-10005, pstmt-20005, rs-50005} closed
2020-07-03 17:51:31  [ main:2921 ] - [ DEBUG ]  {conn-10005, pstmt-20005} clearParameters. 
2020-07-03 17:51:31  [ main:2922 ] - [ DEBUG ]  {conn-10005, pstmt-20005} enter cache
2020-07-03 17:51:33  [ main:4682 ] - [ DEBUG ]  {conn 10005} rollback
2020-07-03 17:51:33  [ main:4682 ] - [ DEBUG ]  {conn-10005} setAutoCommit true
2020-07-03 17:51:33  [ main:4683 ] - [ DEBUG ]  {conn-10005} pool-recycle
2020-07-03 17:51:33  [ Thread-2:4691 ] - [ DEBUG ]  {conn-10001} closed
2020-07-03 17:51:33  [ Thread-2:4692 ] - [ DEBUG ]  {conn-10002} closed
2020-07-03 17:51:33  [ Thread-2:4693 ] - [ DEBUG ]  {conn-10003} closed
2020-07-03 17:51:33  [ Thread-2:4693 ] - [ DEBUG ]  {conn-10004} closed
2020-07-03 17:51:33  [ Thread-2:4693 ] - [ DEBUG ]  {conn-10005, pstmt-20005} exit cache
2020-07-03 17:51:33  [ Thread-2:4693 ] - [ DEBUG ]  {conn-10005, pstmt-20005} closed
2020-07-03 17:51:33  [ Thread-2:4694 ] - [ DEBUG ]  {conn-10005} closed
2020-07-03 17:51:33  [ Thread-2:4695 ] - [ INFO ]  {dataSource-1} closed
2020-07-03 17:52:12  [ main:0 ] - [ DEBUG ]  {conn-10001} connected
2020-07-03 17:52:12  [ main:9 ] - [ DEBUG ]  {conn-10001, stmt-20000} created
2020-07-03 17:52:12  [ main:87 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} query executed. 76.8527 millis. SELECT 1
2020-07-03 17:52:12  [ main:87 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} open
2020-07-03 17:52:12  [ main:89 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} Header: []
2020-07-03 17:52:12  [ main:97 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} Result: [1]
2020-07-03 17:52:12  [ main:97 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} closed
2020-07-03 17:52:12  [ main:98 ] - [ DEBUG ]  {conn-10001, stmt-20000} closed
2020-07-03 17:52:12  [ main:105 ] - [ DEBUG ]  {conn-10002} connected
2020-07-03 17:52:12  [ main:106 ] - [ DEBUG ]  {conn-10002, stmt-20001} created
2020-07-03 17:52:12  [ main:106 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} query executed. 0.5626 millis. SELECT 1
2020-07-03 17:52:12  [ main:106 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} open
2020-07-03 17:52:12  [ main:107 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} Header: []
2020-07-03 17:52:12  [ main:107 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} Result: [1]
2020-07-03 17:52:12  [ main:107 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} closed
2020-07-03 17:52:12  [ main:107 ] - [ DEBUG ]  {conn-10002, stmt-20001} closed
2020-07-03 17:52:12  [ main:114 ] - [ DEBUG ]  {conn-10003} connected
2020-07-03 17:52:12  [ main:115 ] - [ DEBUG ]  {conn-10003, stmt-20002} created
2020-07-03 17:52:12  [ main:117 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} query executed. 0.8139 millis. SELECT 1
2020-07-03 17:52:12  [ main:117 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} open
2020-07-03 17:52:12  [ main:117 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} Header: []
2020-07-03 17:52:12  [ main:118 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} Result: [1]
2020-07-03 17:52:12  [ main:118 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} closed
2020-07-03 17:52:12  [ main:118 ] - [ DEBUG ]  {conn-10003, stmt-20002} closed
2020-07-03 17:52:12  [ main:123 ] - [ DEBUG ]  {conn-10004} connected
2020-07-03 17:52:12  [ main:124 ] - [ DEBUG ]  {conn-10004, stmt-20003} created
2020-07-03 17:52:12  [ main:125 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} query executed. 0.6042 millis. SELECT 1
2020-07-03 17:52:12  [ main:125 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} open
2020-07-03 17:52:12  [ main:125 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} Header: []
2020-07-03 17:52:12  [ main:125 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} Result: [1]
2020-07-03 17:52:12  [ main:125 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} closed
2020-07-03 17:52:12  [ main:125 ] - [ DEBUG ]  {conn-10004, stmt-20003} closed
2020-07-03 17:52:12  [ main:130 ] - [ DEBUG ]  {conn-10005} connected
2020-07-03 17:52:12  [ main:131 ] - [ DEBUG ]  {conn-10005, stmt-20004} created
2020-07-03 17:52:12  [ main:132 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} query executed. 0.6072 millis. SELECT 1
2020-07-03 17:52:12  [ main:132 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} open
2020-07-03 17:52:12  [ main:132 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} Header: []
2020-07-03 17:52:12  [ main:132 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} Result: [1]
2020-07-03 17:52:12  [ main:132 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} closed
2020-07-03 17:52:12  [ main:133 ] - [ DEBUG ]  {conn-10005, stmt-20004} closed
2020-07-03 17:52:12  [ main:136 ] - [ INFO ]  {dataSource-1} inited
2020-07-03 17:52:12  [ main:140 ] - [ DEBUG ]  {conn-10005} pool-connect
2020-07-03 17:52:12  [ main:143 ] - [ DEBUG ]  {conn-10005} setAutoCommit false
2020-07-03 17:52:14  [ main:2077 ] - [ DEBUG ]  {conn-10005, pstmt-20005} created. select * from UserInfo where UserId=?
2020-07-03 17:52:14  [ main:2084 ] - [ DEBUG ]  {conn-10005, pstmt-20005} Parameters : [12]
2020-07-03 17:52:14  [ main:2085 ] - [ DEBUG ]  {conn-10005, pstmt-20005} Types : [VARCHAR]
2020-07-03 17:52:14  [ main:2087 ] - [ DEBUG ]  {conn-10005, pstmt-20005} executed. 2.9094 millis. select * from UserInfo where UserId=?
2020-07-03 17:52:14  [ main:2088 ] - [ DEBUG ]  {conn-10005, pstmt-20005, rs-50005} open
2020-07-03 17:52:14  [ main:2088 ] - [ DEBUG ]  {conn-10005, pstmt-20005, rs-50005} Header: [UserId, UserNumber, UserPwd, UserSex, UserName, UserPart, UserType, UserBirthday, UserAddress, UserSignDate, UserHeadImg, UserLike, UserStr, StrString, IntInteger]
2020-07-03 17:52:14  [ main:2093 ] - [ DEBUG ]  {conn-10005, pstmt-20005, rs-50005} Result: [12, 123456, dsdsds, true, hao, 用户, vip, 201203, 火星, null, null, null, null, null, null]
2020-07-03 17:52:14  [ main:2094 ] - [ DEBUG ]  {conn-10005, pstmt-20005, rs-50005} closed
2020-07-03 17:52:14  [ main:2101 ] - [ DEBUG ]  {conn-10005, pstmt-20005} clearParameters. 
2020-07-03 17:52:14  [ main:2101 ] - [ DEBUG ]  {conn-10005, pstmt-20005} enter cache
2020-07-03 17:53:54  [ main:101520 ] - [ DEBUG ]  {conn 10005} rollback
2020-07-03 17:53:54  [ main:101520 ] - [ DEBUG ]  {conn-10005} setAutoCommit true
2020-07-03 17:53:54  [ main:101522 ] - [ DEBUG ]  {conn-10005} pool-recycle
2020-07-03 17:53:54  [ Thread-2:101533 ] - [ DEBUG ]  {conn-10001} closed
2020-07-03 17:53:54  [ Thread-2:101535 ] - [ DEBUG ]  {conn-10002} closed
2020-07-03 17:53:54  [ Thread-2:101535 ] - [ DEBUG ]  {conn-10003} closed
2020-07-03 17:53:54  [ Thread-2:101536 ] - [ DEBUG ]  {conn-10004} closed
2020-07-03 17:53:54  [ Thread-2:101536 ] - [ DEBUG ]  {conn-10005, pstmt-20005} exit cache
2020-07-03 17:53:54  [ Thread-2:101536 ] - [ DEBUG ]  {conn-10005, pstmt-20005} closed
2020-07-03 17:53:54  [ Thread-2:101537 ] - [ DEBUG ]  {conn-10005} closed
2020-07-03 17:53:54  [ Thread-2:101538 ] - [ INFO ]  {dataSource-1} closed
2020-07-03 17:57:31  [ http-nio-8080-exec-1:0 ] - [ DEBUG ]  {conn-10001} connected
2020-07-03 17:57:31  [ http-nio-8080-exec-1:5 ] - [ DEBUG ]  {conn-10001, stmt-20000} created
2020-07-03 17:57:31  [ http-nio-8080-exec-1:52 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} query executed. 44.7734 millis. SELECT 1
2020-07-03 17:57:31  [ http-nio-8080-exec-1:52 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} open
2020-07-03 17:57:31  [ http-nio-8080-exec-1:54 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} Header: []
2020-07-03 17:57:31  [ http-nio-8080-exec-1:58 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} Result: [1]
2020-07-03 17:57:31  [ http-nio-8080-exec-1:59 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} closed
2020-07-03 17:57:31  [ http-nio-8080-exec-1:59 ] - [ DEBUG ]  {conn-10001, stmt-20000} closed
2020-07-03 17:57:31  [ http-nio-8080-exec-1:65 ] - [ DEBUG ]  {conn-10002} connected
2020-07-03 17:57:31  [ http-nio-8080-exec-1:66 ] - [ DEBUG ]  {conn-10002, stmt-20001} created
2020-07-03 17:57:31  [ http-nio-8080-exec-1:67 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} query executed. 0.5666 millis. SELECT 1
2020-07-03 17:57:31  [ http-nio-8080-exec-1:67 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} open
2020-07-03 17:57:31  [ http-nio-8080-exec-1:67 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} Header: []
2020-07-03 17:57:31  [ http-nio-8080-exec-1:67 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} Result: [1]
2020-07-03 17:57:31  [ http-nio-8080-exec-1:68 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} closed
2020-07-03 17:57:31  [ http-nio-8080-exec-1:68 ] - [ DEBUG ]  {conn-10002, stmt-20001} closed
2020-07-03 17:57:31  [ http-nio-8080-exec-1:73 ] - [ DEBUG ]  {conn-10003} connected
2020-07-03 17:57:31  [ http-nio-8080-exec-1:73 ] - [ DEBUG ]  {conn-10003, stmt-20002} created
2020-07-03 17:57:31  [ http-nio-8080-exec-1:74 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} query executed. 0.4965 millis. SELECT 1
2020-07-03 17:57:31  [ http-nio-8080-exec-1:74 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} open
2020-07-03 17:57:31  [ http-nio-8080-exec-1:75 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} Header: []
2020-07-03 17:57:31  [ http-nio-8080-exec-1:75 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} Result: [1]
2020-07-03 17:57:31  [ http-nio-8080-exec-1:75 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} closed
2020-07-03 17:57:31  [ http-nio-8080-exec-1:75 ] - [ DEBUG ]  {conn-10003, stmt-20002} closed
2020-07-03 17:57:31  [ http-nio-8080-exec-1:80 ] - [ DEBUG ]  {conn-10004} connected
2020-07-03 17:57:31  [ http-nio-8080-exec-1:81 ] - [ DEBUG ]  {conn-10004, stmt-20003} created
2020-07-03 17:57:31  [ http-nio-8080-exec-1:81 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} query executed. 0.4617 millis. SELECT 1
2020-07-03 17:57:31  [ http-nio-8080-exec-1:81 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} open
2020-07-03 17:57:31  [ http-nio-8080-exec-1:82 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} Header: []
2020-07-03 17:57:31  [ http-nio-8080-exec-1:82 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} Result: [1]
2020-07-03 17:57:31  [ http-nio-8080-exec-1:82 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} closed
2020-07-03 17:57:31  [ http-nio-8080-exec-1:82 ] - [ DEBUG ]  {conn-10004, stmt-20003} closed
2020-07-03 17:57:31  [ http-nio-8080-exec-1:87 ] - [ DEBUG ]  {conn-10005} connected
2020-07-03 17:57:31  [ http-nio-8080-exec-1:87 ] - [ DEBUG ]  {conn-10005, stmt-20004} created
2020-07-03 17:57:31  [ http-nio-8080-exec-1:88 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} query executed. 0.4884 millis. SELECT 1
2020-07-03 17:57:31  [ http-nio-8080-exec-1:88 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} open
2020-07-03 17:57:31  [ http-nio-8080-exec-1:88 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} Header: []
2020-07-03 17:57:31  [ http-nio-8080-exec-1:89 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} Result: [1]
2020-07-03 17:57:31  [ http-nio-8080-exec-1:89 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} closed
2020-07-03 17:57:31  [ http-nio-8080-exec-1:89 ] - [ DEBUG ]  {conn-10005, stmt-20004} closed
2020-07-03 17:57:31  [ http-nio-8080-exec-1:90 ] - [ INFO ]  {dataSource-1} inited
2020-07-03 17:57:31  [ http-nio-8080-exec-1:91 ] - [ DEBUG ]  {conn-10005} pool-connect
2020-07-03 17:57:31  [ http-nio-8080-exec-1:117 ] - [ DEBUG ]  {conn-10005, pstmt-20005} created. select * from UserInfo where UserId=?
2020-07-03 17:57:31  [ http-nio-8080-exec-1:121 ] - [ DEBUG ]  {conn-10005, pstmt-20005} Parameters : [12]
2020-07-03 17:57:31  [ http-nio-8080-exec-1:121 ] - [ DEBUG ]  {conn-10005, pstmt-20005} Types : [VARCHAR]
2020-07-03 17:57:31  [ http-nio-8080-exec-1:124 ] - [ DEBUG ]  {conn-10005, pstmt-20005} executed. 3.2738 millis. select * from UserInfo where UserId=?
2020-07-03 17:57:31  [ http-nio-8080-exec-1:125 ] - [ DEBUG ]  {conn-10005, pstmt-20005, rs-50005} open
2020-07-03 17:57:31  [ http-nio-8080-exec-1:125 ] - [ DEBUG ]  {conn-10005, pstmt-20005, rs-50005} Header: [UserId, UserNumber, UserPwd, UserSex, UserName, UserPart, UserType, UserBirthday, UserAddress, UserSignDate, UserHeadImg, UserLike, UserStr, StrString, IntInteger]
2020-07-03 17:57:31  [ http-nio-8080-exec-1:128 ] - [ DEBUG ]  {conn-10005, pstmt-20005, rs-50005} Result: [12, 123456, dsdsds, true, hao, 用户, vip, 201203, 火星, null, null, null, null, null, null]
2020-07-03 17:57:31  [ http-nio-8080-exec-1:130 ] - [ DEBUG ]  {conn-10005, pstmt-20005, rs-50005} closed
2020-07-03 17:57:31  [ http-nio-8080-exec-1:133 ] - [ DEBUG ]  {conn-10005, pstmt-20005} clearParameters. 
2020-07-03 17:57:31  [ http-nio-8080-exec-1:134 ] - [ DEBUG ]  {conn-10005, pstmt-20005} enter cache
2020-07-03 17:57:31  [ http-nio-8080-exec-1:134 ] - [ DEBUG ]  {conn-10005} pool-recycle
2020-07-03 17:58:35  [ http-nio-8080-exec-6:64219 ] - [ DEBUG ]  {conn-10005, stmt-20006} created
2020-07-03 17:58:35  [ http-nio-8080-exec-6:64221 ] - [ DEBUG ]  {conn-10005, stmt-20006, rs-50006} query executed. 1.1541 millis. SELECT 1
2020-07-03 17:58:35  [ http-nio-8080-exec-6:64221 ] - [ DEBUG ]  {conn-10005, stmt-20006, rs-50006} open
2020-07-03 17:58:35  [ http-nio-8080-exec-6:64221 ] - [ DEBUG ]  {conn-10005, stmt-20006, rs-50006} Header: []
2020-07-03 17:58:35  [ http-nio-8080-exec-6:64222 ] - [ DEBUG ]  {conn-10005, stmt-20006, rs-50006} Result: [1]
2020-07-03 17:58:35  [ http-nio-8080-exec-6:64222 ] - [ DEBUG ]  {conn-10005, stmt-20006, rs-50006} closed
2020-07-03 17:58:35  [ http-nio-8080-exec-6:64222 ] - [ DEBUG ]  {conn-10005, stmt-20006} closed
2020-07-03 17:58:35  [ http-nio-8080-exec-6:64223 ] - [ DEBUG ]  {conn-10005} pool-connect
2020-07-03 17:58:35  [ http-nio-8080-exec-6:64223 ] - [ DEBUG ]  {conn-10005, pstmt-20005} Parameters : [12]
2020-07-03 17:58:35  [ http-nio-8080-exec-6:64223 ] - [ DEBUG ]  {conn-10005, pstmt-20005} Types : [VARCHAR]
2020-07-03 17:58:35  [ http-nio-8080-exec-6:64280 ] - [ DEBUG ]  {conn-10005, pstmt-20005} executed. 56.0047 millis. select * from UserInfo where UserId=?
2020-07-03 17:58:35  [ http-nio-8080-exec-6:64281 ] - [ DEBUG ]  {conn-10005, pstmt-20005, rs-50007} open
2020-07-03 17:58:35  [ http-nio-8080-exec-6:64282 ] - [ DEBUG ]  {conn-10005, pstmt-20005, rs-50007} Header: [UserId, UserNumber, UserPwd, UserSex, UserName, UserPart, UserType, UserBirthday, UserAddress, UserSignDate, UserHeadImg, UserLike, UserStr, StrString, IntInteger]
2020-07-03 17:58:35  [ http-nio-8080-exec-6:64285 ] - [ DEBUG ]  {conn-10005, pstmt-20005, rs-50007} Result: [12, 123456, dsdsds, true, hao, 用户, vip, 201203, 火星, null, null, null, null, null, null]
2020-07-03 17:58:35  [ http-nio-8080-exec-6:64287 ] - [ DEBUG ]  {conn-10005, pstmt-20005, rs-50007} closed
2020-07-03 17:58:35  [ http-nio-8080-exec-6:64294 ] - [ DEBUG ]  {conn-10005, pstmt-20005} clearParameters. 
2020-07-03 17:58:35  [ http-nio-8080-exec-6:64295 ] - [ DEBUG ]  {conn-10005} pool-recycle
2020-07-03 18:00:38  [ http-nio-8080-exec-6:187161 ] - [ DEBUG ]  {conn-10005, stmt-20007} created
2020-07-03 18:00:38  [ http-nio-8080-exec-6:187162 ] - [ DEBUG ]  {conn-10005, stmt-20007, rs-50008} query executed. 0.8136 millis. SELECT 1
2020-07-03 18:00:38  [ http-nio-8080-exec-6:187162 ] - [ DEBUG ]  {conn-10005, stmt-20007, rs-50008} open
2020-07-03 18:00:38  [ http-nio-8080-exec-6:187162 ] - [ DEBUG ]  {conn-10005, stmt-20007, rs-50008} Header: []
2020-07-03 18:00:38  [ http-nio-8080-exec-6:187163 ] - [ DEBUG ]  {conn-10005, stmt-20007, rs-50008} Result: [1]
2020-07-03 18:00:38  [ http-nio-8080-exec-6:187163 ] - [ DEBUG ]  {conn-10005, stmt-20007, rs-50008} closed
2020-07-03 18:00:38  [ http-nio-8080-exec-6:187163 ] - [ DEBUG ]  {conn-10005, stmt-20007} closed
2020-07-03 18:00:38  [ http-nio-8080-exec-6:187163 ] - [ DEBUG ]  {conn-10005} pool-connect
2020-07-03 18:00:38  [ http-nio-8080-exec-6:187164 ] - [ DEBUG ]  {conn-10005, pstmt-20005} Parameters : [12]
2020-07-03 18:00:38  [ http-nio-8080-exec-6:187164 ] - [ DEBUG ]  {conn-10005, pstmt-20005} Types : [VARCHAR]
2020-07-03 18:00:38  [ http-nio-8080-exec-6:187166 ] - [ DEBUG ]  {conn-10005, pstmt-20005} executed. 1.1891 millis. select * from UserInfo where UserId=?
2020-07-03 18:00:38  [ http-nio-8080-exec-6:187166 ] - [ DEBUG ]  {conn-10005, pstmt-20005, rs-50009} open
2020-07-03 18:00:38  [ http-nio-8080-exec-6:187166 ] - [ DEBUG ]  {conn-10005, pstmt-20005, rs-50009} Header: [UserId, UserNumber, UserPwd, UserSex, UserName, UserPart, UserType, UserBirthday, UserAddress, UserSignDate, UserHeadImg, UserLike, UserStr, StrString, IntInteger]
2020-07-03 18:00:38  [ http-nio-8080-exec-6:187166 ] - [ DEBUG ]  {conn-10005, pstmt-20005, rs-50009} Result: [12, 123456, dsdsds, true, hao, 用户, vip, 201203, 火星, null, null, null, null, null, null]
2020-07-03 18:00:38  [ http-nio-8080-exec-6:187167 ] - [ DEBUG ]  {conn-10005, pstmt-20005, rs-50009} closed
2020-07-03 18:00:38  [ http-nio-8080-exec-6:187167 ] - [ DEBUG ]  {conn-10005, pstmt-20005} clearParameters. 
2020-07-03 18:00:38  [ http-nio-8080-exec-6:187167 ] - [ DEBUG ]  {conn-10005} pool-recycle
2020-07-03 18:01:41  [ http-nio-8080-exec-7:249760 ] - [ DEBUG ]  {conn-10005, stmt-20008} created
2020-07-03 18:01:41  [ http-nio-8080-exec-7:249761 ] - [ DEBUG ]  {conn-10005, stmt-20008, rs-50010} query executed. 0.8681 millis. SELECT 1
2020-07-03 18:01:41  [ http-nio-8080-exec-7:249762 ] - [ DEBUG ]  {conn-10005, stmt-20008, rs-50010} open
2020-07-03 18:01:41  [ http-nio-8080-exec-7:249762 ] - [ DEBUG ]  {conn-10005, stmt-20008, rs-50010} Header: []
2020-07-03 18:01:41  [ http-nio-8080-exec-7:249762 ] - [ DEBUG ]  {conn-10005, stmt-20008, rs-50010} Result: [1]
2020-07-03 18:01:41  [ http-nio-8080-exec-7:249763 ] - [ DEBUG ]  {conn-10005, stmt-20008, rs-50010} closed
2020-07-03 18:01:41  [ http-nio-8080-exec-7:249763 ] - [ DEBUG ]  {conn-10005, stmt-20008} closed
2020-07-03 18:01:41  [ http-nio-8080-exec-7:249763 ] - [ DEBUG ]  {conn-10005} pool-connect
2020-07-03 18:01:41  [ http-nio-8080-exec-7:249763 ] - [ DEBUG ]  {conn-10005, pstmt-20005} Parameters : [12]
2020-07-03 18:01:41  [ http-nio-8080-exec-7:249764 ] - [ DEBUG ]  {conn-10005, pstmt-20005} Types : [VARCHAR]
2020-07-03 18:01:41  [ http-nio-8080-exec-7:249765 ] - [ DEBUG ]  {conn-10005, pstmt-20005} executed. 1.2693 millis. select * from UserInfo where UserId=?
2020-07-03 18:01:41  [ http-nio-8080-exec-7:249765 ] - [ DEBUG ]  {conn-10005, pstmt-20005, rs-50011} open
2020-07-03 18:01:41  [ http-nio-8080-exec-7:249765 ] - [ DEBUG ]  {conn-10005, pstmt-20005, rs-50011} Header: [UserId, UserNumber, UserPwd, UserSex, UserName, UserPart, UserType, UserBirthday, UserAddress, UserSignDate, UserHeadImg, UserLike, UserStr, StrString, IntInteger]
2020-07-03 18:01:41  [ http-nio-8080-exec-7:249766 ] - [ DEBUG ]  {conn-10005, pstmt-20005, rs-50011} Result: [12, 123456, dsdsds, true, hao, 用户, vip, 201203, 火星, null, null, null, null, null, null]
2020-07-03 18:01:41  [ http-nio-8080-exec-7:249767 ] - [ DEBUG ]  {conn-10005, pstmt-20005, rs-50011} closed
2020-07-03 18:01:41  [ http-nio-8080-exec-7:249767 ] - [ DEBUG ]  {conn-10005, pstmt-20005} clearParameters. 
2020-07-03 18:01:41  [ http-nio-8080-exec-7:249767 ] - [ DEBUG ]  {conn-10005} pool-recycle
2020-07-03 18:09:23  [ main:0 ] - [ DEBUG ]  {conn-10001} connected
2020-07-03 18:09:23  [ main:8 ] - [ DEBUG ]  {conn-10001, stmt-20000} created
2020-07-03 18:09:23  [ main:76 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} query executed. 67.1805 millis. SELECT 1
2020-07-03 18:09:23  [ main:77 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} open
2020-07-03 18:09:23  [ main:79 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} Header: []
2020-07-03 18:09:23  [ main:86 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} Result: [1]
2020-07-03 18:09:23  [ main:86 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} closed
2020-07-03 18:09:23  [ main:87 ] - [ DEBUG ]  {conn-10001, stmt-20000} closed
2020-07-03 18:09:23  [ main:92 ] - [ DEBUG ]  {conn-10002} connected
2020-07-03 18:09:23  [ main:93 ] - [ DEBUG ]  {conn-10002, stmt-20001} created
2020-07-03 18:09:23  [ main:93 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} query executed. 0.5324 millis. SELECT 1
2020-07-03 18:09:23  [ main:93 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} open
2020-07-03 18:09:23  [ main:94 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} Header: []
2020-07-03 18:09:23  [ main:94 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} Result: [1]
2020-07-03 18:09:23  [ main:94 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} closed
2020-07-03 18:09:23  [ main:94 ] - [ DEBUG ]  {conn-10002, stmt-20001} closed
2020-07-03 18:09:23  [ main:99 ] - [ DEBUG ]  {conn-10003} connected
2020-07-03 18:09:23  [ main:100 ] - [ DEBUG ]  {conn-10003, stmt-20002} created
2020-07-03 18:09:23  [ main:100 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} query executed. 0.5024 millis. SELECT 1
2020-07-03 18:09:23  [ main:100 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} open
2020-07-03 18:09:23  [ main:101 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} Header: []
2020-07-03 18:09:23  [ main:101 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} Result: [1]
2020-07-03 18:09:23  [ main:101 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} closed
2020-07-03 18:09:23  [ main:101 ] - [ DEBUG ]  {conn-10003, stmt-20002} closed
2020-07-03 18:09:23  [ main:118 ] - [ DEBUG ]  {conn-10004} connected
2020-07-03 18:09:23  [ main:118 ] - [ DEBUG ]  {conn-10004, stmt-20003} created
2020-07-03 18:09:23  [ main:119 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} query executed. 0.5328 millis. SELECT 1
2020-07-03 18:09:23  [ main:119 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} open
2020-07-03 18:09:23  [ main:119 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} Header: []
2020-07-03 18:09:23  [ main:119 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} Result: [1]
2020-07-03 18:09:23  [ main:119 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} closed
2020-07-03 18:09:23  [ main:119 ] - [ DEBUG ]  {conn-10004, stmt-20003} closed
2020-07-03 18:09:23  [ main:124 ] - [ DEBUG ]  {conn-10005} connected
2020-07-03 18:09:23  [ main:124 ] - [ DEBUG ]  {conn-10005, stmt-20004} created
2020-07-03 18:09:23  [ main:125 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} query executed. 0.4812 millis. SELECT 1
2020-07-03 18:09:23  [ main:125 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} open
2020-07-03 18:09:23  [ main:125 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} Header: []
2020-07-03 18:09:23  [ main:125 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} Result: [1]
2020-07-03 18:09:23  [ main:126 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} closed
2020-07-03 18:09:23  [ main:126 ] - [ DEBUG ]  {conn-10005, stmt-20004} closed
2020-07-03 18:09:23  [ main:129 ] - [ INFO ]  {dataSource-1} inited
2020-07-03 18:09:23  [ main:131 ] - [ DEBUG ]  {conn-10005} pool-connect
2020-07-03 18:09:23  [ main:134 ] - [ DEBUG ]  {conn-10005} setAutoCommit false
2020-07-03 18:09:23  [ main:196 ] - [ DEBUG ]  {conn-10005} setAutoCommit true
2020-07-03 18:09:23  [ main:197 ] - [ DEBUG ]  {conn-10005} pool-recycle
2020-07-03 18:09:23  [ Thread-2:209 ] - [ DEBUG ]  {conn-10001} closed
2020-07-03 18:09:23  [ Thread-2:210 ] - [ DEBUG ]  {conn-10002} closed
2020-07-03 18:09:23  [ Thread-2:210 ] - [ DEBUG ]  {conn-10003} closed
2020-07-03 18:09:23  [ Thread-2:211 ] - [ DEBUG ]  {conn-10004} closed
2020-07-03 18:09:23  [ Thread-2:211 ] - [ DEBUG ]  {conn-10005} closed
2020-07-03 18:09:23  [ Thread-2:212 ] - [ INFO ]  {dataSource-1} closed
2020-07-03 18:10:28  [ main:0 ] - [ DEBUG ]  {conn-10001} connected
2020-07-03 18:10:28  [ main:8 ] - [ DEBUG ]  {conn-10001, stmt-20000} created
2020-07-03 18:10:28  [ main:75 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} query executed. 66.2278 millis. SELECT 1
2020-07-03 18:10:28  [ main:76 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} open
2020-07-03 18:10:28  [ main:77 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} Header: []
2020-07-03 18:10:28  [ main:85 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} Result: [1]
2020-07-03 18:10:28  [ main:85 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} closed
2020-07-03 18:10:28  [ main:85 ] - [ DEBUG ]  {conn-10001, stmt-20000} closed
2020-07-03 18:10:28  [ main:91 ] - [ DEBUG ]  {conn-10002} connected
2020-07-03 18:10:28  [ main:92 ] - [ DEBUG ]  {conn-10002, stmt-20001} created
2020-07-03 18:10:28  [ main:93 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} query executed. 0.6901 millis. SELECT 1
2020-07-03 18:10:28  [ main:93 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} open
2020-07-03 18:10:28  [ main:93 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} Header: []
2020-07-03 18:10:28  [ main:93 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} Result: [1]
2020-07-03 18:10:28  [ main:93 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} closed
2020-07-03 18:10:28  [ main:93 ] - [ DEBUG ]  {conn-10002, stmt-20001} closed
2020-07-03 18:10:28  [ main:99 ] - [ DEBUG ]  {conn-10003} connected
2020-07-03 18:10:28  [ main:99 ] - [ DEBUG ]  {conn-10003, stmt-20002} created
2020-07-03 18:10:28  [ main:100 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} query executed. 0.4928 millis. SELECT 1
2020-07-03 18:10:28  [ main:100 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} open
2020-07-03 18:10:28  [ main:100 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} Header: []
2020-07-03 18:10:28  [ main:101 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} Result: [1]
2020-07-03 18:10:28  [ main:101 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} closed
2020-07-03 18:10:28  [ main:101 ] - [ DEBUG ]  {conn-10003, stmt-20002} closed
2020-07-03 18:10:28  [ main:105 ] - [ DEBUG ]  {conn-10004} connected
2020-07-03 18:10:28  [ main:106 ] - [ DEBUG ]  {conn-10004, stmt-20003} created
2020-07-03 18:10:28  [ main:106 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} query executed. 0.4628 millis. SELECT 1
2020-07-03 18:10:28  [ main:107 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} open
2020-07-03 18:10:28  [ main:107 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} Header: []
2020-07-03 18:10:28  [ main:107 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} Result: [1]
2020-07-03 18:10:28  [ main:107 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} closed
2020-07-03 18:10:28  [ main:107 ] - [ DEBUG ]  {conn-10004, stmt-20003} closed
2020-07-03 18:10:28  [ main:112 ] - [ DEBUG ]  {conn-10005} connected
2020-07-03 18:10:28  [ main:113 ] - [ DEBUG ]  {conn-10005, stmt-20004} created
2020-07-03 18:10:28  [ main:114 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} query executed. 0.7025 millis. SELECT 1
2020-07-03 18:10:28  [ main:114 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} open
2020-07-03 18:10:28  [ main:114 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} Header: []
2020-07-03 18:10:28  [ main:114 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} Result: [1]
2020-07-03 18:10:28  [ main:114 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} closed
2020-07-03 18:10:28  [ main:114 ] - [ DEBUG ]  {conn-10005, stmt-20004} closed
2020-07-03 18:10:28  [ main:117 ] - [ INFO ]  {dataSource-1} inited
2020-07-03 18:10:28  [ main:120 ] - [ DEBUG ]  {conn-10005} pool-connect
2020-07-03 18:10:28  [ main:123 ] - [ DEBUG ]  {conn-10005} setAutoCommit false
2020-07-03 18:10:28  [ main:185 ] - [ DEBUG ]  {conn-10005} setAutoCommit true
2020-07-03 18:10:28  [ main:186 ] - [ DEBUG ]  {conn-10005} pool-recycle
2020-07-03 18:10:28  [ Thread-2:198 ] - [ DEBUG ]  {conn-10001} closed
2020-07-03 18:10:28  [ Thread-2:200 ] - [ DEBUG ]  {conn-10002} closed
2020-07-03 18:10:28  [ Thread-2:200 ] - [ DEBUG ]  {conn-10003} closed
2020-07-03 18:10:28  [ Thread-2:200 ] - [ DEBUG ]  {conn-10004} closed
2020-07-03 18:10:28  [ Thread-2:201 ] - [ DEBUG ]  {conn-10005} closed
2020-07-03 18:10:28  [ Thread-2:202 ] - [ INFO ]  {dataSource-1} closed
2020-07-03 18:14:17  [ main:0 ] - [ DEBUG ]  {conn-10001} connected
2020-07-03 18:14:17  [ main:9 ] - [ DEBUG ]  {conn-10001, stmt-20000} created
2020-07-03 18:14:17  [ main:76 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} query executed. 66.1265 millis. SELECT 1
2020-07-03 18:14:17  [ main:76 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} open
2020-07-03 18:14:17  [ main:78 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} Header: []
2020-07-03 18:14:17  [ main:84 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} Result: [1]
2020-07-03 18:14:17  [ main:85 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} closed
2020-07-03 18:14:17  [ main:85 ] - [ DEBUG ]  {conn-10001, stmt-20000} closed
2020-07-03 18:14:17  [ main:91 ] - [ DEBUG ]  {conn-10002} connected
2020-07-03 18:14:17  [ main:91 ] - [ DEBUG ]  {conn-10002, stmt-20001} created
2020-07-03 18:14:17  [ main:92 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} query executed. 0.598 millis. SELECT 1
2020-07-03 18:14:17  [ main:92 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} open
2020-07-03 18:14:17  [ main:92 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} Header: []
2020-07-03 18:14:17  [ main:93 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} Result: [1]
2020-07-03 18:14:17  [ main:93 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} closed
2020-07-03 18:14:17  [ main:93 ] - [ DEBUG ]  {conn-10002, stmt-20001} closed
2020-07-03 18:14:17  [ main:99 ] - [ DEBUG ]  {conn-10003} connected
2020-07-03 18:14:17  [ main:99 ] - [ DEBUG ]  {conn-10003, stmt-20002} created
2020-07-03 18:14:17  [ main:100 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} query executed. 0.5919 millis. SELECT 1
2020-07-03 18:14:17  [ main:100 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} open
2020-07-03 18:14:17  [ main:100 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} Header: []
2020-07-03 18:14:17  [ main:101 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} Result: [1]
2020-07-03 18:14:17  [ main:101 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} closed
2020-07-03 18:14:17  [ main:101 ] - [ DEBUG ]  {conn-10003, stmt-20002} closed
2020-07-03 18:14:17  [ main:106 ] - [ DEBUG ]  {conn-10004} connected
2020-07-03 18:14:17  [ main:106 ] - [ DEBUG ]  {conn-10004, stmt-20003} created
2020-07-03 18:14:17  [ main:107 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} query executed. 0.5273 millis. SELECT 1
2020-07-03 18:14:17  [ main:107 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} open
2020-07-03 18:14:17  [ main:107 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} Header: []
2020-07-03 18:14:17  [ main:107 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} Result: [1]
2020-07-03 18:14:17  [ main:107 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} closed
2020-07-03 18:14:17  [ main:108 ] - [ DEBUG ]  {conn-10004, stmt-20003} closed
2020-07-03 18:14:17  [ main:112 ] - [ DEBUG ]  {conn-10005} connected
2020-07-03 18:14:17  [ main:113 ] - [ DEBUG ]  {conn-10005, stmt-20004} created
2020-07-03 18:14:17  [ main:113 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} query executed. 0.5839 millis. SELECT 1
2020-07-03 18:14:17  [ main:114 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} open
2020-07-03 18:14:17  [ main:114 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} Header: []
2020-07-03 18:14:17  [ main:114 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} Result: [1]
2020-07-03 18:14:17  [ main:114 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} closed
2020-07-03 18:14:17  [ main:114 ] - [ DEBUG ]  {conn-10005, stmt-20004} closed
2020-07-03 18:14:17  [ main:117 ] - [ INFO ]  {dataSource-1} inited
2020-07-03 18:14:17  [ main:120 ] - [ DEBUG ]  {conn-10005} pool-connect
2020-07-03 18:14:17  [ main:122 ] - [ DEBUG ]  {conn-10005} setAutoCommit false
2020-07-03 18:14:17  [ main:233 ] - [ DEBUG ]  {conn-10005, pstmt-20005} created. select * from UserInfo where UserId=?
2020-07-03 18:14:17  [ main:238 ] - [ DEBUG ]  {conn-10005, pstmt-20005} Parameters : [12]
2020-07-03 18:14:17  [ main:238 ] - [ DEBUG ]  {conn-10005, pstmt-20005} Types : [VARCHAR]
2020-07-03 18:14:17  [ main:241 ] - [ DEBUG ]  {conn-10005, pstmt-20005} executed. 2.8182 millis. select * from UserInfo where UserId=?
2020-07-03 18:14:17  [ main:241 ] - [ DEBUG ]  {conn-10005, pstmt-20005, rs-50005} open
2020-07-03 18:14:17  [ main:241 ] - [ DEBUG ]  {conn-10005, pstmt-20005, rs-50005} Header: [UserId, UserNumber, UserPwd, UserSex, UserName, UserPart, UserType, UserBirthday, UserAddress, UserSignDate, UserHeadImg, UserLike, UserStr, StrString, IntInteger]
2020-07-03 18:14:17  [ main:245 ] - [ DEBUG ]  {conn-10005, pstmt-20005, rs-50005} Result: [12, 123456, dsdsds, true, hao, 用户, vip, 201203, 火星, null, null, null, null, null, null]
2020-07-03 18:14:17  [ main:247 ] - [ DEBUG ]  {conn-10005, pstmt-20005, rs-50005} closed
2020-07-03 18:14:17  [ main:253 ] - [ DEBUG ]  {conn-10005, pstmt-20005} clearParameters. 
2020-07-03 18:14:17  [ main:254 ] - [ DEBUG ]  {conn-10005, pstmt-20005} enter cache
2020-07-03 18:14:17  [ main:257 ] - [ DEBUG ]  {conn 10005} rollback
2020-07-03 18:14:17  [ main:258 ] - [ DEBUG ]  {conn-10005} setAutoCommit true
2020-07-03 18:14:17  [ main:259 ] - [ DEBUG ]  {conn-10005} pool-recycle
2020-07-03 18:14:17  [ Thread-2:267 ] - [ DEBUG ]  {conn-10001} closed
2020-07-03 18:14:17  [ Thread-2:268 ] - [ DEBUG ]  {conn-10002} closed
2020-07-03 18:14:17  [ Thread-2:269 ] - [ DEBUG ]  {conn-10003} closed
2020-07-03 18:14:17  [ Thread-2:269 ] - [ DEBUG ]  {conn-10004} closed
2020-07-03 18:14:17  [ Thread-2:269 ] - [ DEBUG ]  {conn-10005, pstmt-20005} exit cache
2020-07-03 18:14:17  [ Thread-2:270 ] - [ DEBUG ]  {conn-10005, pstmt-20005} closed
2020-07-03 18:14:17  [ Thread-2:270 ] - [ DEBUG ]  {conn-10005} closed
2020-07-03 18:14:17  [ Thread-2:271 ] - [ INFO ]  {dataSource-1} closed
2020-07-03 18:14:41  [ main:0 ] - [ DEBUG ]  {conn-10001} connected
2020-07-03 18:14:41  [ main:9 ] - [ DEBUG ]  {conn-10001, stmt-20000} created
2020-07-03 18:14:41  [ main:75 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} query executed. 66.8093 millis. SELECT 1
2020-07-03 18:14:41  [ main:76 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} open
2020-07-03 18:14:41  [ main:77 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} Header: []
2020-07-03 18:14:41  [ main:84 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} Result: [1]
2020-07-03 18:14:41  [ main:84 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} closed
2020-07-03 18:14:41  [ main:84 ] - [ DEBUG ]  {conn-10001, stmt-20000} closed
2020-07-03 18:14:41  [ main:90 ] - [ DEBUG ]  {conn-10002} connected
2020-07-03 18:14:41  [ main:91 ] - [ DEBUG ]  {conn-10002, stmt-20001} created
2020-07-03 18:14:41  [ main:92 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} query executed. 0.5408 millis. SELECT 1
2020-07-03 18:14:41  [ main:92 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} open
2020-07-03 18:14:41  [ main:92 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} Header: []
2020-07-03 18:14:41  [ main:92 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} Result: [1]
2020-07-03 18:14:41  [ main:92 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} closed
2020-07-03 18:14:41  [ main:92 ] - [ DEBUG ]  {conn-10002, stmt-20001} closed
2020-07-03 18:14:41  [ main:98 ] - [ DEBUG ]  {conn-10003} connected
2020-07-03 18:14:41  [ main:98 ] - [ DEBUG ]  {conn-10003, stmt-20002} created
2020-07-03 18:14:41  [ main:99 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} query executed. 0.4468 millis. SELECT 1
2020-07-03 18:14:41  [ main:99 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} open
2020-07-03 18:14:41  [ main:99 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} Header: []
2020-07-03 18:14:41  [ main:99 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} Result: [1]
2020-07-03 18:14:41  [ main:99 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} closed
2020-07-03 18:14:41  [ main:99 ] - [ DEBUG ]  {conn-10003, stmt-20002} closed
2020-07-03 18:14:41  [ main:104 ] - [ DEBUG ]  {conn-10004} connected
2020-07-03 18:14:41  [ main:104 ] - [ DEBUG ]  {conn-10004, stmt-20003} created
2020-07-03 18:14:41  [ main:105 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} query executed. 0.5592 millis. SELECT 1
2020-07-03 18:14:41  [ main:106 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} open
2020-07-03 18:14:41  [ main:106 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} Header: []
2020-07-03 18:14:41  [ main:106 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} Result: [1]
2020-07-03 18:14:41  [ main:106 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} closed
2020-07-03 18:14:41  [ main:106 ] - [ DEBUG ]  {conn-10004, stmt-20003} closed
2020-07-03 18:14:41  [ main:111 ] - [ DEBUG ]  {conn-10005} connected
2020-07-03 18:14:41  [ main:111 ] - [ DEBUG ]  {conn-10005, stmt-20004} created
2020-07-03 18:14:41  [ main:111 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} query executed. 0.4637 millis. SELECT 1
2020-07-03 18:14:41  [ main:112 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} open
2020-07-03 18:14:41  [ main:112 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} Header: []
2020-07-03 18:14:41  [ main:112 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} Result: [1]
2020-07-03 18:14:41  [ main:112 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} closed
2020-07-03 18:14:41  [ main:112 ] - [ DEBUG ]  {conn-10005, stmt-20004} closed
2020-07-03 18:14:41  [ main:115 ] - [ INFO ]  {dataSource-1} inited
2020-07-03 18:14:41  [ main:118 ] - [ DEBUG ]  {conn-10005} pool-connect
2020-07-03 18:14:41  [ main:120 ] - [ DEBUG ]  {conn-10005} setAutoCommit false
2020-07-03 18:14:41  [ main:228 ] - [ DEBUG ]  {conn-10005, pstmt-20005} created. select * from UserInfo where UserId=?
2020-07-03 18:14:41  [ main:233 ] - [ DEBUG ]  {conn-10005, pstmt-20005} Parameters : [12]
2020-07-03 18:14:41  [ main:233 ] - [ DEBUG ]  {conn-10005, pstmt-20005} Types : [VARCHAR]
2020-07-03 18:14:41  [ main:235 ] - [ DEBUG ]  {conn-10005, pstmt-20005} executed. 2.6972 millis. select * from UserInfo where UserId=?
2020-07-03 18:14:41  [ main:236 ] - [ DEBUG ]  {conn-10005, pstmt-20005, rs-50005} open
2020-07-03 18:14:41  [ main:236 ] - [ DEBUG ]  {conn-10005, pstmt-20005, rs-50005} Header: [UserId, UserNumber, UserPwd, UserSex, UserName, UserPart, UserType, UserBirthday, UserAddress, UserSignDate, UserHeadImg, UserLike, UserStr, StrString, IntInteger]
2020-07-03 18:14:41  [ main:240 ] - [ DEBUG ]  {conn-10005, pstmt-20005, rs-50005} Result: [12, 123456, dsdsds, true, hao, 用户, vip, 201203, 火星, null, null, null, null, null, null]
2020-07-03 18:14:41  [ main:242 ] - [ DEBUG ]  {conn-10005, pstmt-20005, rs-50005} closed
2020-07-03 18:14:41  [ main:246 ] - [ DEBUG ]  {conn-10005, pstmt-20005} clearParameters. 
2020-07-03 18:14:41  [ main:247 ] - [ DEBUG ]  {conn-10005, pstmt-20005} enter cache
2020-07-03 18:14:41  [ main:250 ] - [ DEBUG ]  {conn 10005} rollback
2020-07-03 18:14:41  [ main:250 ] - [ DEBUG ]  {conn-10005} setAutoCommit true
2020-07-03 18:14:41  [ main:252 ] - [ DEBUG ]  {conn-10005} pool-recycle
2020-07-03 18:14:41  [ Thread-2:259 ] - [ DEBUG ]  {conn-10001} closed
2020-07-03 18:14:41  [ Thread-2:260 ] - [ DEBUG ]  {conn-10002} closed
2020-07-03 18:14:41  [ Thread-2:261 ] - [ DEBUG ]  {conn-10003} closed
2020-07-03 18:14:41  [ Thread-2:261 ] - [ DEBUG ]  {conn-10004} closed
2020-07-03 18:14:41  [ Thread-2:261 ] - [ DEBUG ]  {conn-10005, pstmt-20005} exit cache
2020-07-03 18:14:41  [ Thread-2:262 ] - [ DEBUG ]  {conn-10005, pstmt-20005} closed
2020-07-03 18:14:41  [ Thread-2:262 ] - [ DEBUG ]  {conn-10005} closed
2020-07-03 18:14:41  [ Thread-2:264 ] - [ INFO ]  {dataSource-1} closed
2020-07-03 18:15:48  [ main:0 ] - [ DEBUG ]  Logging initialized using 'class org.apache.ibatis.logging.log4j.Log4jImpl' adapter.
2020-07-03 18:15:49  [ main:1070 ] - [ DEBUG ]  {conn-10001} connected
2020-07-03 18:15:49  [ main:1077 ] - [ DEBUG ]  {conn-10001, stmt-20000} created
2020-07-03 18:15:49  [ main:1145 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} query executed. 66.5619 millis. SELECT 1
2020-07-03 18:15:49  [ main:1145 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} open
2020-07-03 18:15:49  [ main:1147 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} Header: []
2020-07-03 18:15:49  [ main:1154 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} Result: [1]
2020-07-03 18:15:49  [ main:1154 ] - [ DEBUG ]  {conn-10001, stmt-20000, rs-50000} closed
2020-07-03 18:15:49  [ main:1155 ] - [ DEBUG ]  {conn-10001, stmt-20000} closed
2020-07-03 18:15:49  [ main:1161 ] - [ DEBUG ]  {conn-10002} connected
2020-07-03 18:15:49  [ main:1161 ] - [ DEBUG ]  {conn-10002, stmt-20001} created
2020-07-03 18:15:49  [ main:1162 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} query executed. 0.5902 millis. SELECT 1
2020-07-03 18:15:49  [ main:1162 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} open
2020-07-03 18:15:49  [ main:1162 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} Header: []
2020-07-03 18:15:49  [ main:1163 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} Result: [1]
2020-07-03 18:15:49  [ main:1163 ] - [ DEBUG ]  {conn-10002, stmt-20001, rs-50001} closed
2020-07-03 18:15:49  [ main:1163 ] - [ DEBUG ]  {conn-10002, stmt-20001} closed
2020-07-03 18:15:49  [ main:1168 ] - [ DEBUG ]  {conn-10003} connected
2020-07-03 18:15:49  [ main:1169 ] - [ DEBUG ]  {conn-10003, stmt-20002} created
2020-07-03 18:15:49  [ main:1170 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} query executed. 0.6284 millis. SELECT 1
2020-07-03 18:15:49  [ main:1170 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} open
2020-07-03 18:15:49  [ main:1170 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} Header: []
2020-07-03 18:15:49  [ main:1170 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} Result: [1]
2020-07-03 18:15:49  [ main:1171 ] - [ DEBUG ]  {conn-10003, stmt-20002, rs-50002} closed
2020-07-03 18:15:49  [ main:1171 ] - [ DEBUG ]  {conn-10003, stmt-20002} closed
2020-07-03 18:15:49  [ main:1176 ] - [ DEBUG ]  {conn-10004} connected
2020-07-03 18:15:49  [ main:1176 ] - [ DEBUG ]  {conn-10004, stmt-20003} created
2020-07-03 18:15:49  [ main:1177 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} query executed. 0.5108 millis. SELECT 1
2020-07-03 18:15:49  [ main:1177 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} open
2020-07-03 18:15:49  [ main:1177 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} Header: []
2020-07-03 18:15:49  [ main:1177 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} Result: [1]
2020-07-03 18:15:49  [ main:1177 ] - [ DEBUG ]  {conn-10004, stmt-20003, rs-50003} closed
2020-07-03 18:15:49  [ main:1178 ] - [ DEBUG ]  {conn-10004, stmt-20003} closed
2020-07-03 18:15:49  [ main:1182 ] - [ DEBUG ]  {conn-10005} connected
2020-07-03 18:15:49  [ main:1182 ] - [ DEBUG ]  {conn-10005, stmt-20004} created
2020-07-03 18:15:49  [ main:1183 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} query executed. 0.4567 millis. SELECT 1
2020-07-03 18:15:49  [ main:1183 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} open
2020-07-03 18:15:49  [ main:1183 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} Header: []
2020-07-03 18:15:49  [ main:1184 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} Result: [1]
2020-07-03 18:15:49  [ main:1184 ] - [ DEBUG ]  {conn-10005, stmt-20004, rs-50004} closed
2020-07-03 18:15:49  [ main:1184 ] - [ DEBUG ]  {conn-10005, stmt-20004} closed
2020-07-03 18:15:49  [ main:1187 ] - [ INFO ]  {dataSource-1} inited
2020-07-03 18:15:49  [ main:1190 ] - [ DEBUG ]  {conn-10005} pool-connect
2020-07-03 18:15:49  [ main:1266 ] - [ DEBUG ]  {conn-10005} setAutoCommit false
2020-07-03 18:15:49  [ main:1343 ] - [ DEBUG ]  Creating a new SqlSession
2020-07-03 18:15:49  [ main:1348 ] - [ DEBUG ]  Registering transaction synchronization for SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@5671078e]
2020-07-03 18:15:49  [ main:1358 ] - [ DEBUG ]  JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@56d3af4d] will be managed by Spring
2020-07-03 18:15:49  [ main:1361 ] - [ DEBUG ]  ==>  Preparing: select * from UserInfo where UserId=? 
2020-07-03 18:15:49  [ main:1407 ] - [ DEBUG ]  {conn-10005, pstmt-20005} created. select * from UserInfo where UserId=?
2020-07-03 18:15:49  [ main:1418 ] - [ DEBUG ]  ==> Parameters: 12(String)
2020-07-03 18:15:49  [ main:1418 ] - [ DEBUG ]  {conn-10005, pstmt-20005} Parameters : [12]
2020-07-03 18:15:49  [ main:1418 ] - [ DEBUG ]  {conn-10005, pstmt-20005} Types : [VARCHAR]
2020-07-03 18:15:49  [ main:1421 ] - [ DEBUG ]  {conn-10005, pstmt-20005} executed. 2.6636 millis. select * from UserInfo where UserId=?
2020-07-03 18:15:49  [ main:1421 ] - [ DEBUG ]  {conn-10005, pstmt-20005, rs-50005} open
2020-07-03 18:15:49  [ main:1422 ] - [ DEBUG ]  {conn-10005, pstmt-20005, rs-50005} Header: [UserId, UserNumber, UserPwd, UserSex, UserName, UserPart, UserType, UserBirthday, UserAddress, UserSignDate, UserHeadImg, UserLike, UserStr, StrString, IntInteger]
2020-07-03 18:15:49  [ main:1430 ] - [ DEBUG ]  {conn-10005, pstmt-20005, rs-50005} Result: [12, 123456, dsdsds, true, hao, 用户, vip, 201203, 火星, null, null, null, null, null, null]
2020-07-03 18:15:49  [ main:1433 ] - [ DEBUG ]  <==      Total: 1
2020-07-03 18:15:49  [ main:1433 ] - [ DEBUG ]  {conn-10005, pstmt-20005, rs-50005} closed
2020-07-03 18:15:49  [ main:1439 ] - [ DEBUG ]  {conn-10005, pstmt-20005} clearParameters. 
2020-07-03 18:15:49  [ main:1440 ] - [ DEBUG ]  {conn-10005, pstmt-20005} enter cache
2020-07-03 18:15:49  [ main:1440 ] - [ DEBUG ]  Releasing transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@5671078e]
2020-07-03 18:15:49  [ main:1443 ] - [ DEBUG ]  Transaction synchronization deregistering SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@5671078e]
2020-07-03 18:15:49  [ main:1443 ] - [ DEBUG ]  Transaction synchronization closing SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@5671078e]
2020-07-03 18:15:49  [ main:1444 ] - [ DEBUG ]  {conn 10005} rollback
2020-07-03 18:15:49  [ main:1444 ] - [ DEBUG ]  {conn-10005} setAutoCommit true
2020-07-03 18:15:49  [ main:1445 ] - [ DEBUG ]  {conn-10005} pool-recycle
2020-07-03 18:15:49  [ Thread-2:1452 ] - [ DEBUG ]  {conn-10001} closed
2020-07-03 18:15:49  [ Thread-2:1454 ] - [ DEBUG ]  {conn-10002} closed
2020-07-03 18:15:49  [ Thread-2:1454 ] - [ DEBUG ]  {conn-10003} closed
2020-07-03 18:15:49  [ Thread-2:1455 ] - [ DEBUG ]  {conn-10004} closed
2020-07-03 18:15:49  [ Thread-2:1455 ] - [ DEBUG ]  {conn-10005, pstmt-20005} exit cache
2020-07-03 18:15:49  [ Thread-2:1455 ] - [ DEBUG ]  {conn-10005, pstmt-20005} closed
2020-07-03 18:15:49  [ Thread-2:1455 ] - [ DEBUG ]  {conn-10005} closed
2020-07-03 18:15:49  [ Thread-2:1457 ] - [ INFO ]  {dataSource-1} closed
